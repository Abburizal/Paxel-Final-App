<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.ksp)&#10;    id(&quot;kotlin-parcelize&quot;)&#10;}&#10;&#10;ksp {&#10;    arg(&quot;room.schemaLocation&quot;, &quot;$projectDir/schemas&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.paxel.arspacescan&quot;&#10;    compileSdk = 34 // Downgrade to 34 for better ARCore compatibility&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.paxel.arspacescan&quot;&#10;        minSdk = 24&#10;        targetSdk = 34 // Match compileSdk&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.constraintlayout)&#10;    implementation(&quot;androidx.fragment:fragment-ktx:1.8.4&quot;)&#10;    implementation(libs.androidx.activity.ktx)&#10;&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    implementation(libs.kotlinx.coroutines.core)&#10;    implementation(libs.kotlinx.coroutines.android)&#10;&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    ksp(libs.androidx.room.compiler)&#10;&#10;    // ARCore &amp; Sceneform&#10;    implementation(libs.sceneform)&#10;    implementation(libs.google.ar.core)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#10;    androidTestImplementation(libs.androidx.test.espresso.core)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.ksp)&#10;    id(&quot;kotlin-parcelize&quot;)&#10;}&#10;&#10;ksp {&#10;    arg(&quot;room.schemaLocation&quot;, &quot;$projectDir/schemas&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.paxel.arspacescan&quot;&#10;    compileSdk = 34 // Downgrade to 34 for better ARCore compatibility&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.paxel.arspacescan&quot;&#10;        minSdk = 24&#10;        targetSdk = 34 // Match compileSdk&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Use compatible AndroidX versions for API 34&#10;    implementation(&quot;androidx.core:core-ktx:1.13.1&quot;)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.7.0&quot;)&#10;    implementation(&quot;com.google.android.material:material:1.12.0&quot;)&#10;    implementation(&quot;androidx.activity:activity-ktx:1.9.0&quot;)&#10;    implementation(&quot;androidx.constraintlayout:constraintlayout:2.1.4&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.3&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.8.3&quot;)&#10;    implementation(&quot;androidx.fragment:fragment-ktx:1.8.1&quot;)&#10;&#10;    // ARCore and Sceneform&#10;    implementation(&quot;com.google.ar:core:1.41.0&quot;)&#10;    implementation(&quot;com.gorisse.thomas.sceneform:sceneform:1.23.0&quot;)&#10;&#10;    // Room database&#10;    implementation(&quot;androidx.room:room-runtime:2.6.1&quot;)&#10;    implementation(&quot;androidx.room:room-ktx:2.6.1&quot;)&#10;    ksp(&quot;androidx.room:room-compiler:2.6.1&quot;)&#10;&#10;    // Coroutines&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;&#10;    // Testing&#10;    testImplementation(&quot;junit:junit:4.13.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test.ext:junit:1.2.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.6.1&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/history/MeasurementAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/history/MeasurementAdapter.kt" />
              <option name="originalContent" value="package com.paxel.arspacescan.ui.history&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.ListAdapter&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.data.model.PackageMeasurement&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class MeasurementAdapter(&#10;    private val onItemClick: (PackageMeasurement) -&gt; Unit,&#10;    private val onDeleteClick: (PackageMeasurement) -&gt; Unit&#10;) : ListAdapter&lt;PackageMeasurement, MeasurementAdapter.ViewHolder&gt;(MeasurementDiffCallback()) {&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_measurement, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        holder.bind(getItem(position))&#10;    }&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val tvPackageName: TextView = itemView.findViewById(R.id.tvPackageName)&#10;        private val tvDimensions: TextView = itemView.findViewById(R.id.tvDimensions)&#10;        private val tvVolume: TextView = itemView.findViewById(R.id.tvVolume)&#10;        private val tvDate: TextView = itemView.findViewById(R.id.tvDate)&#10;        private val btnDelete: ImageButton = itemView.findViewById(R.id.btnDelete)&#10;&#10;        fun bind(measurement: PackageMeasurement) {&#10;            tvPackageName.text = measurement.packageName&#10;            tvDimensions.text = &quot;${measurement.length} × ${measurement.width} × ${measurement.height} cm&quot;&#10;            tvVolume.text = &quot;Volume: ${measurement.volume} cm³&quot;&#10;&#10;            val dateFormat = SimpleDateFormat(&quot;dd MMM yyyy, HH:mm&quot;, Locale(&quot;id&quot;, &quot;ID&quot;))&#10;            tvDate.text = dateFormat.format(Date(measurement.timestamp))&#10;&#10;            itemView.setOnClickListener {&#10;                onItemClick(measurement)&#10;            }&#10;&#10;            btnDelete.setOnClickListener {&#10;                onDeleteClick(measurement)&#10;            }&#10;        }&#10;    }&#10;&#10;    class MeasurementDiffCallback : DiffUtil.ItemCallback&lt;PackageMeasurement&gt;() {&#10;        override fun areItemsTheSame(oldItem: PackageMeasurement, newItem: PackageMeasurement): Boolean {&#10;            return oldItem.id == newItem.id&#10;        }&#10;&#10;        override fun areContentsTheSame(oldItem: PackageMeasurement, newItem: PackageMeasurement): Boolean {&#10;            return oldItem == newItem&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.paxel.arspacescan.ui.history&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.ListAdapter&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.data.model.MeasurementResult&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class MeasurementAdapter(&#10;    private val onItemClick: (MeasurementResult) -&gt; Unit,&#10;    private val onDeleteClick: (MeasurementResult) -&gt; Unit&#10;) : ListAdapter&lt;MeasurementResult, MeasurementAdapter.ViewHolder&gt;(MeasurementDiffCallback()) {&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_measurement, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        holder.bind(getItem(position))&#10;    }&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val tvPackageName: TextView = itemView.findViewById(R.id.tvPackageName)&#10;        private val tvDimensions: TextView = itemView.findViewById(R.id.tvDimensions)&#10;        private val tvTimestamp: TextView = itemView.findViewById(R.id.tvTimestamp)&#10;        private val tvVolume: TextView = itemView.findViewById(R.id.tvVolume)&#10;        private val btnDelete: ImageButton = itemView.findViewById(R.id.btnDelete)&#10;&#10;        fun bind(measurement: MeasurementResult) {&#10;            val dateFormat = SimpleDateFormat(&quot;dd MMM yyyy, HH:mm&quot;, Locale.getDefault())&#10;&#10;            tvPackageName.text = measurement.packageName ?: &quot;Pengukuran&quot;&#10;            // Convert from meters to centimeters for display&#10;            val widthCm = String.format(&quot;%.1f&quot;, measurement.width * 100)&#10;            val heightCm = String.format(&quot;%.1f&quot;, measurement.height * 100)&#10;            val depthCm = String.format(&quot;%.1f&quot;, measurement.depth * 100)&#10;            tvDimensions.text = &quot;${widthCm}×${heightCm}×${depthCm} cm&quot;&#10;            tvTimestamp.text = dateFormat.format(Date(measurement.timestamp))&#10;            // Convert from cubic meters to cubic centimeters&#10;            val volumeCm3 = measurement.volume * 1_000_000&#10;            tvVolume.text = &quot;${String.format(&quot;%.2f&quot;, volumeCm3)} cm³&quot;&#10;&#10;            itemView.setOnClickListener {&#10;                onItemClick(measurement)&#10;            }&#10;&#10;            btnDelete.setOnClickListener {&#10;                onDeleteClick(measurement)&#10;            }&#10;        }&#10;    }&#10;&#10;    private class MeasurementDiffCallback : DiffUtil.ItemCallback&lt;MeasurementResult&gt;() {&#10;        override fun areItemsTheSame(oldItem: MeasurementResult, newItem: MeasurementResult): Boolean {&#10;            return oldItem.id == newItem.id&#10;        }&#10;&#10;        override fun areContentsTheSame(oldItem: MeasurementResult, newItem: MeasurementResult): Boolean {&#10;            return oldItem == newItem&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/main/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/main/MainActivity.kt" />
              <option name="originalContent" value="package com.paxel.arspacescan.ui.main&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import com.google.android.material.button.MaterialButton&#10;import com.google.ar.core.ArCoreApk&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.ui.common.safeHapticFeedback&#10;import com.paxel.arspacescan.ui.history.HistoryActivity&#10;import com.paxel.arspacescan.ui.measurement.ARMeasurementActivity&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private val CAMERA_PERMISSION_CODE = 100&#10;    private var isSplashScreen = true&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Tampilkan splash screen&#10;        setContentView(R.layout.activity_splash)&#10;&#10;        Handler(Looper.getMainLooper()).postDelayed({&#10;            isSplashScreen = false&#10;            setContentView(R.layout.activity_main)&#10;            setupMainMenu()&#10;        }, 2000)&#10;    }&#10;&#10;    private fun setupMainMenu() {&#10;        val startMeasurementButton = findViewById&lt;MaterialButton&gt;(R.id.btnStartMeasurement)&#10;        val historyButton = findViewById&lt;MaterialButton&gt;(R.id.btnHistory)&#10;&#10;        startMeasurementButton.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            checkPermissionsAndStartMeasurement()&#10;        }&#10;&#10;        historyButton.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            startActivity(Intent(this, HistoryActivity::class.java))&#10;        }&#10;    }&#10;&#10;    private fun checkPermissionsAndStartMeasurement() {&#10;        // Cek ketersediaan ARCore&#10;        val availability = ArCoreApk.getInstance().checkAvailability(this)&#10;        if (availability.isTransient) {&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                checkPermissionsAndStartMeasurement()&#10;            }, 200)&#10;            return&#10;        }&#10;&#10;        if (availability.isSupported) {&#10;            if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)&#10;                != PackageManager.PERMISSION_GRANTED&#10;            ) {&#10;                ActivityCompat.requestPermissions(&#10;                    this,&#10;                    arrayOf(Manifest.permission.CAMERA),&#10;                    CAMERA_PERMISSION_CODE&#10;                )&#10;            } else {&#10;                showPackageInputDialog()&#10;            }&#10;        } else {&#10;            Toast.makeText(&#10;                this,&#10;                &quot;Perangkat ini tidak mendukung ARCore&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;        }&#10;    }&#10;&#10;    private fun showPackageInputDialog() {&#10;        val dialog = PackageInputDialog()&#10;        dialog.setOnPackageNameEnteredListener { packageName, declaredSize -&gt;&#10;            val intent = Intent(this, ARMeasurementActivity::class.java)&#10;            intent.putExtra(&quot;PACKAGE_NAME&quot;, packageName)&#10;            intent.putExtra(&quot;DECLARED_SIZE&quot;, declaredSize)&#10;            startActivity(intent)&#10;        }&#10;        dialog.show(supportFragmentManager, &quot;PackageInputDialog&quot;)&#10;    }&#10;&#10;    override fun onRequestPermissionsResult(&#10;        requestCode: Int,&#10;        permissions: Array&lt;out String&gt;,&#10;        grantResults: IntArray&#10;    ) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults)&#10;        if (requestCode == CAMERA_PERMISSION_CODE) {&#10;            if (grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                showPackageInputDialog()&#10;            } else {&#10;                Toast.makeText(&#10;                    this,&#10;                    &quot;Izin kamera diperlukan untuk menggunakan fitur AR&quot;,&#10;                    Toast.LENGTH_LONG&#10;                ).show()&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.paxel.arspacescan.ui.main&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import com.google.android.material.button.MaterialButton&#10;import com.google.ar.core.ArCoreApk&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.ui.common.safeHapticFeedback&#10;import com.paxel.arspacescan.ui.history.HistoryActivity&#10;import com.paxel.arspacescan.ui.measurement.ARMeasurementActivity&#10;&#10;class MainActivity : AppCompatActivity(), PackageInputDialog.OnPackageInputListener {&#10;&#10;    private val CAMERA_PERMISSION_CODE = 100&#10;    private var isSplashScreen = true&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Tampilkan splash screen&#10;        setContentView(R.layout.activity_splash)&#10;&#10;        Handler(Looper.getMainLooper()).postDelayed({&#10;            isSplashScreen = false&#10;            setContentView(R.layout.activity_main)&#10;            setupMainMenu()&#10;        }, 2000)&#10;    }&#10;&#10;    private fun setupMainMenu() {&#10;        val startMeasurementButton = findViewById&lt;MaterialButton&gt;(R.id.btnStartMeasurement)&#10;        val historyButton = findViewById&lt;MaterialButton&gt;(R.id.btnHistory)&#10;&#10;        startMeasurementButton.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            checkPermissionsAndStartMeasurement()&#10;        }&#10;&#10;        historyButton.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            startActivity(Intent(this, HistoryActivity::class.java))&#10;        }&#10;    }&#10;&#10;    private fun checkPermissionsAndStartMeasurement() {&#10;        // Cek ketersediaan ARCore&#10;        val availability = ArCoreApk.getInstance().checkAvailability(this)&#10;        if (availability.isTransient) {&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                checkPermissionsAndStartMeasurement()&#10;            }, 200)&#10;            return&#10;        }&#10;&#10;        if (availability.isSupported) {&#10;            if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)&#10;                != PackageManager.PERMISSION_GRANTED&#10;            ) {&#10;                ActivityCompat.requestPermissions(&#10;                    this,&#10;                    arrayOf(Manifest.permission.CAMERA),&#10;                    CAMERA_PERMISSION_CODE&#10;                )&#10;            } else {&#10;                showPackageInputDialog()&#10;            }&#10;        } else {&#10;            Toast.makeText(&#10;                this,&#10;                &quot;Perangkat ini tidak mendukung ARCore&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;        }&#10;    }&#10;&#10;    private fun showPackageInputDialog() {&#10;        val dialog = PackageInputDialog()&#10;        dialog.show(supportFragmentManager, &quot;PackageInputDialog&quot;)&#10;    }&#10;&#10;    override fun onRequestPermissionsResult(&#10;        requestCode: Int,&#10;        permissions: Array&lt;out String&gt;,&#10;        grantResults: IntArray&#10;    ) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults)&#10;        if (requestCode == CAMERA_PERMISSION_CODE) {&#10;            if (grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                showPackageInputDialog()&#10;            } else {&#10;                Toast.makeText(&#10;                    this,&#10;                    &quot;Izin kamera diperlukan untuk menggunakan fitur AR&quot;,&#10;                    Toast.LENGTH_LONG&#10;                ).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    // Implementation of OnPackageInputListener interface&#10;    override fun onPackageInput(packageName: String, declaredSize: String) {&#10;        // Handle package input data received from PackageInputDialog&#10;        // Start ARMeasurementActivity with the package information&#10;        val intent = Intent(this, ARMeasurementActivity::class.java)&#10;        intent.putExtra(&quot;PACKAGE_NAME&quot;, packageName)&#10;        intent.putExtra(&quot;DECLARED_SIZE&quot;, declaredSize)&#10;        startActivity(intent)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/main/PackageInputDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/main/PackageInputDialog.kt" />
              <option name="originalContent" value="package com.paxel.arspacescan.ui.main&#10;&#10;import android.app.Dialog&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.widget.ArrayAdapter&#10;import android.widget.AutoCompleteTextView&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.fragment.app.DialogFragment&#10;import com.google.android.material.textfield.TextInputLayout&#10;import com.paxel.arspacescan.R&#10;&#10;class PackageInputDialog : DialogFragment() {&#10;&#10;    interface OnPackageInputListener {&#10;        fun onPackageInput(packageName: String, declaredSize: String)&#10;    }&#10;&#10;    private var listener: OnPackageInputListener? = null&#10;&#10;    fun setOnPackageNameEnteredListener(callback: (String, String) -&gt; Unit) {&#10;        listener = object : OnPackageInputListener {&#10;            override fun onPackageInput(packageName: String, declaredSize: String) {&#10;                callback(packageName, declaredSize)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onAttach(context: Context) {&#10;        super.onAttach(context)&#10;        try {&#10;            listener = context as OnPackageInputListener&#10;        } catch (e: ClassCastException) {&#10;            throw ClassCastException(&quot;$context must implement OnPackageInputListener&quot;)&#10;        }&#10;    }&#10;&#10;    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {&#10;        val inflater = LayoutInflater.from(requireContext())&#10;        val view = inflater.inflate(R.layout.dialog_package_input, null)&#10;&#10;        val etPackageName = view.findViewById&lt;EditText&gt;(R.id.etPackageName)&#10;        val tilDeclaredSize = view.findViewById&lt;TextInputLayout&gt;(R.id.tilDeclaredSize)&#10;        val actvDeclaredSize = view.findViewById&lt;AutoCompleteTextView&gt;(R.id.actvDeclaredSize)&#10;&#10;        // Set up the declared size dropdown with predefined options&#10;        val sizeOptions = resources.getStringArray(R.array.package_size_options)&#10;        val sizeAdapter = ArrayAdapter(requireContext(), android.R.layout.simple_dropdown_item_1line, sizeOptions)&#10;        actvDeclaredSize.setAdapter(sizeAdapter)&#10;&#10;        // Set default package name&#10;        etPackageName.setText(getString(R.string.default_package_name))&#10;&#10;        return AlertDialog.Builder(requireContext())&#10;            .setTitle(R.string.package_name_title)&#10;            .setView(view)&#10;            .setPositiveButton(R.string.ok) { _, _ -&gt;&#10;                val packageName = etPackageName.text.toString().trim()&#10;                val declaredSize = actvDeclaredSize.text.toString().trim()&#10;&#10;                val finalPackageName = if (packageName.isEmpty()) {&#10;                    getString(R.string.default_package_name)&#10;                } else {&#10;                    packageName&#10;                }&#10;&#10;                val finalDeclaredSize = if (declaredSize.isEmpty()) {&#10;                    getString(R.string.select_declared_size_prompt)&#10;                } else {&#10;                    declaredSize&#10;                }&#10;&#10;                listener?.onPackageInput(finalPackageName, finalDeclaredSize)&#10;            }&#10;            .setNegativeButton(R.string.cancel) { dialog, _ -&gt;&#10;                dialog.dismiss()&#10;            }&#10;            .create()&#10;    }&#10;&#10;    companion object {&#10;        const val TAG = &quot;PackageInputDialog&quot;&#10;&#10;        fun newInstance(): PackageInputDialog {&#10;            return PackageInputDialog()&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.paxel.arspacescan.ui.main&#10;&#10;import android.app.Dialog&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.widget.ArrayAdapter&#10;import android.widget.AutoCompleteTextView&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.fragment.app.DialogFragment&#10;import com.google.android.material.textfield.TextInputLayout&#10;import com.paxel.arspacescan.R&#10;&#10;class PackageInputDialog : DialogFragment() {&#10;&#10;    interface OnPackageInputListener {&#10;        fun onPackageInput(packageName: String, declaredSize: String)&#10;    }&#10;&#10;    private var listener: OnPackageInputListener? = null&#10;&#10;    override fun onAttach(context: Context) {&#10;        super.onAttach(context)&#10;        try {&#10;            listener = context as OnPackageInputListener&#10;        } catch (e: ClassCastException) {&#10;            throw ClassCastException(&quot;$context must implement OnPackageInputListener&quot;)&#10;        }&#10;    }&#10;&#10;    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {&#10;        val inflater = LayoutInflater.from(requireContext())&#10;        val view = inflater.inflate(R.layout.dialog_package_input, null)&#10;&#10;        val etPackageName = view.findViewById&lt;EditText&gt;(R.id.etPackageName)&#10;        val tilDeclaredSize = view.findViewById&lt;TextInputLayout&gt;(R.id.tilDeclaredSize)&#10;        val actvDeclaredSize = view.findViewById&lt;AutoCompleteTextView&gt;(R.id.actvDeclaredSize)&#10;&#10;        // Set up the declared size dropdown with predefined options&#10;        val sizeOptions = resources.getStringArray(R.array.package_size_options)&#10;        val sizeAdapter = ArrayAdapter(requireContext(), android.R.layout.simple_dropdown_item_1line, sizeOptions)&#10;        actvDeclaredSize.setAdapter(sizeAdapter)&#10;&#10;        // Set default package name&#10;        etPackageName.setText(getString(R.string.default_package_name))&#10;&#10;        return AlertDialog.Builder(requireContext())&#10;            .setTitle(R.string.package_name_title)&#10;            .setView(view)&#10;            .setPositiveButton(R.string.ok) { _, _ -&gt;&#10;                val packageName = etPackageName.text.toString().trim()&#10;                val declaredSize = actvDeclaredSize.text.toString().trim()&#10;&#10;                val finalPackageName = if (packageName.isEmpty()) {&#10;                    getString(R.string.default_package_name)&#10;                } else {&#10;                    packageName&#10;                }&#10;&#10;                val finalDeclaredSize = if (declaredSize.isEmpty()) {&#10;                    getString(R.string.select_declared_size_prompt)&#10;                } else {&#10;                    declaredSize&#10;                }&#10;&#10;                listener?.onPackageInput(finalPackageName, finalDeclaredSize)&#10;            }&#10;            .setNegativeButton(R.string.cancel) { dialog, _ -&gt;&#10;                dialog.dismiss()&#10;            }&#10;            .create()&#10;    }&#10;&#10;    companion object {&#10;        const val TAG = &quot;PackageInputDialog&quot;&#10;&#10;        fun newInstance(): PackageInputDialog {&#10;            return PackageInputDialog()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/measurement/ARMeasurementActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/measurement/ARMeasurementActivity.kt" />
              <option name="originalContent" value="package com.paxel.arspacescan.ui.measurement&#10;&#10;import android.content.ContentValues&#10;import android.content.Intent&#10;import android.graphics.Bitmap&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.HandlerThread&#10;import android.provider.MediaStore&#10;import android.util.Log&#10;import android.view.PixelCopy&#10;import android.view.View&#10;import android.view.animation.AnimationUtils&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.core.view.drawToBitmap&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import com.google.android.material.button.MaterialButton&#10;import com.google.android.material.card.MaterialCardView&#10;import com.google.ar.core.Config&#10;import com.google.ar.core.Plane&#10;import com.google.ar.core.Session&#10;import com.google.ar.core.TrackingState&#10;import com.google.ar.sceneform.AnchorNode&#10;import com.google.ar.sceneform.FrameTime&#10;import com.google.ar.sceneform.Node&#10;import com.google.ar.sceneform.Scene&#10;import com.google.ar.sceneform.math.Quaternion&#10;import com.google.ar.sceneform.math.Vector3&#10;import com.google.ar.sceneform.rendering.Color&#10;import com.google.ar.sceneform.rendering.MaterialFactory&#10;import com.google.ar.sceneform.rendering.ModelRenderable&#10;import com.google.ar.sceneform.rendering.ShapeFactory&#10;import com.google.ar.sceneform.ux.ArFragment&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.data.model.MeasurementResult&#10;import com.paxel.arspacescan.ui.common.safeHapticFeedback&#10;import com.paxel.arspacescan.ui.result.ResultActivity&#10;import com.paxel.arspacescan.util.MeasurementCalculator&#10;import kotlinx.coroutines.launch&#10;import kotlin.math.max&#10;&#10;class ARMeasurementActivity : AppCompatActivity(), Scene.OnUpdateListener {&#10;&#10;    private val viewModel: ARMeasurementViewModel by viewModels {&#10;        object : ViewModelProvider.Factory {&#10;            override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;                return ARMeasurementViewModel(MeasurementCalculator()) as T&#10;            }&#10;        }&#10;    }&#10;&#10;    private var arFragment: ArFragment? = null&#10;    private lateinit var btnTakePhoto: MaterialButton&#10;    private lateinit var cvTrackingHelp: MaterialCardView&#10;    private lateinit var btnUndo: MaterialButton&#10;    private lateinit var btnReset: MaterialButton&#10;    private var sphereRenderable: ModelRenderable? = null&#10;    private var lineRenderable: ModelRenderable? = null&#10;    private val visualNodes = mutableListOf&lt;Node&gt;()&#10;    private var isArCoreSupported = true&#10;&#10;    // Price Estimation Variables&#10;    private var estimatedPrice = 0&#10;    private var packageSizeCategory = &quot;&quot;&#10;    private lateinit var tvPriceEstimation: TextView&#10;&#10;    // store incoming extras so we can forward them later safely&#10;    private var packageNameExtra: String? = null&#10;    private var declaredSizeExtra: String? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_ar_measurement)&#10;&#10;        // store extras early&#10;        packageNameExtra = intent.getStringExtra(&quot;PACKAGE_NAME&quot;)&#10;        declaredSizeExtra = intent.getStringExtra(&quot;DECLARED_SIZE&quot;)&#10;&#10;        checkARCoreSupport()&#10;        if (!isArCoreSupported) {&#10;            Toast.makeText(this, &quot;ARCore tidak didukung di perangkat ini&quot;, Toast.LENGTH_LONG).show()&#10;            finish()&#10;            return&#10;        }&#10;&#10;        setupUI()&#10;        createRenderables()&#10;        setupAR()&#10;        observeViewModel()&#10;    }&#10;&#10;    private fun checkARCoreSupport() {&#10;        try {&#10;            val availability = com.google.ar.core.ArCoreApk.getInstance().checkAvailability(this)&#10;            isArCoreSupported = availability.isSupported || availability.isTransient&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;ARCore check failed&quot;, e)&#10;            isArCoreSupported = false&#10;        }&#10;    }&#10;&#10;    private fun setupUI() {&#10;        btnUndo = findViewById(R.id.btnUndo)&#10;        btnReset = findViewById(R.id.btnReset)&#10;        btnTakePhoto = findViewById(R.id.btnTakePhoto)&#10;        cvTrackingHelp = findViewById(R.id.cvTrackingHelp)&#10;&#10;        // Initialize Price Estimation UI&#10;        tvPriceEstimation = findViewById(R.id.tvPriceEstimation)&#10;&#10;        // Tambahkan tombol lanjutkan ke hasil&#10;        val btnContinueToResult = findViewById&lt;MaterialButton&gt;(R.id.btnContinueToResult)&#10;&#10;        btnUndo.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            viewModel.undoLastPoint()&#10;        }&#10;        btnReset.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            resetMeasurement()&#10;        }&#10;        btnTakePhoto.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            takePhoto()&#10;        }&#10;&#10;        // Setup tombol lanjutkan ke hasil&#10;        btnContinueToResult.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            proceedToResults()&#10;        }&#10;    }&#10;&#10;    private fun setupAR() {&#10;        try {&#10;            arFragment = (supportFragmentManager.findFragmentById(R.id.arFragment) as? CustomArFragment)&#10;                ?: throw IllegalStateException(&quot;CustomArFragment not found in layout&quot;)&#10;&#10;            // Configure ARCore session to prevent light estimation crash&#10;            arFragment?.arSceneView?.let { sceneView -&gt;&#10;                sceneView.planeRenderer.isEnabled = true&#10;                sceneView.planeRenderer.isVisible = true&#10;            }&#10;&#10;            // add update listener&#10;            arFragment?.arSceneView?.scene?.addOnUpdateListener(this)&#10;&#10;            // tap listener on plane - allow measurement when plane is tracking&#10;            arFragment?.setOnTapArPlaneListener { hitResult, plane, _ -&gt;&#10;                val fragment = arFragment ?: return@setOnTapArPlaneListener&#10;                if (plane.trackingState != TrackingState.TRACKING) {&#10;                    Log.w(&quot;ARMeasurementActivity&quot;, &quot;Tap diabaikan: plane belum tracking.&quot;)&#10;                    return@setOnTapArPlaneListener&#10;                }&#10;&#10;                if (viewModel.uiState.value.step != MeasurementStep.COMPLETED) {&#10;                    fragment.view?.safeHapticFeedback()&#10;                    val anchor = hitResult.createAnchor()&#10;                    val anchorNode = AnchorNode(anchor).apply {&#10;                        parent = fragment.arSceneView.scene&#10;                    }&#10;                    if (anchorNode.anchor == null) {&#10;                        Log.e(&quot;ARMeasurementActivity&quot;, &quot;Anchor gagal dibuat.&quot;)&#10;                        return@setOnTapArPlaneListener&#10;                    }&#10;                    viewModel.handleArTap(anchorNode, this@ARMeasurementActivity)&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;AR setup failed&quot;, e)&#10;            Toast.makeText(this, &quot;Gagal memulai AR: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun createRenderables() {&#10;        MaterialFactory.makeOpaqueWithColor(this, Color(android.graphics.Color.RED))&#10;            .thenAccept { material -&gt;&#10;                sphereRenderable = ShapeFactory.makeSphere(0.01f, Vector3.zero(), material)&#10;            }&#10;            .exceptionally { e -&gt;&#10;                Log.e(&quot;ARMeasurementActivity&quot;, &quot;Failed to create sphere renderable&quot;, e)&#10;                null&#10;            }&#10;&#10;        MaterialFactory.makeOpaqueWithColor(this, Color(android.graphics.Color.YELLOW))&#10;            .thenAccept { material -&gt;&#10;                lineRenderable = ShapeFactory.makeCube(&#10;                    Vector3(0.005f, 0.001f, 1f),&#10;                    Vector3.zero(),&#10;                    material&#10;                )&#10;            }&#10;            .exceptionally { e -&gt;&#10;                Log.e(&quot;ARMeasurementActivity&quot;, &quot;Failed to create line renderable&quot;, e)&#10;                null&#10;            }&#10;    }&#10;&#10;    private fun observeViewModel() {&#10;        val tvInstructions: TextView = findViewById(R.id.tvInstructions)&#10;        val fadeInAnimation = AnimationUtils.loadAnimation(this, R.anim.fade_in)&#10;&#10;        lifecycleScope.launch {&#10;            repeatOnLifecycle(Lifecycle.State.STARTED) {&#10;                launch {&#10;                    viewModel.uiState.collect { state -&gt;&#10;                        tvInstructions.apply {&#10;                            val newText = getString(state.instructionTextId)&#10;                            if (text != newText) {&#10;                                text = newText&#10;                                startAnimation(fadeInAnimation)&#10;                            }&#10;                        }&#10;                        btnUndo.isEnabled = state.isUndoEnabled&#10;                        updateArScene(state)&#10;                    }&#10;                }&#10;&#10;                launch {&#10;                    viewModel.navigationEvent.collect { result -&gt;&#10;                        navigateToResult(result)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun updateArScene(state: ARMeasurementUiState) {&#10;        // remove previous visuals&#10;        visualNodes.forEach { it.parent = null }&#10;        visualNodes.clear()&#10;&#10;        // show/hide take photo button&#10;        btnTakePhoto.visibility =&#10;            if (state.step == MeasurementStep.COMPLETED) View.VISIBLE else View.GONE&#10;&#10;        // show/hide continue to result button&#10;        val btnContinueToResult = findViewById&lt;MaterialButton&gt;(R.id.btnContinueToResult)&#10;        btnContinueToResult.visibility =&#10;            if (state.step == MeasurementStep.COMPLETED) View.VISIBLE else View.GONE&#10;&#10;        // add point spheres&#10;        state.points.forEach { addSphere(it.worldPosition) }&#10;&#10;        when (state.step) {&#10;            MeasurementStep.BASE_DEFINED -&gt; {&#10;                val cornerPositions = state.corners.map { it.worldPosition }&#10;                if (cornerPositions.size &gt;= 4) drawBase(cornerPositions)&#10;            }&#10;&#10;            MeasurementStep.COMPLETED -&gt; {&#10;                val cornerPositions = state.corners.map { it.worldPosition }&#10;                if (cornerPositions.size == 8) drawWireframeBox(cornerPositions)&#10;&#10;                // Calculate package size and price when measurement is completed&#10;                state.finalResult?.let { result -&gt;&#10;                    calculatePackageSizeAndPrice(result)&#10;                    updatePriceEstimationUI()&#10;                }&#10;            }&#10;&#10;            else -&gt; { /* START or other states */&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onUpdate(frameTime: FrameTime?) {&#10;        val fragment = arFragment ?: return&#10;        val frame = fragment.arSceneView.arFrame ?: return&#10;        val isTracking = frame.camera.trackingState == TrackingState.TRACKING&#10;        cvTrackingHelp.visibility = if (isTracking) View.GONE else View.VISIBLE&#10;&#10;        val currentState = viewModel.uiState.value&#10;        if (isTracking &amp;&amp; currentState.step == MeasurementStep.BASE_DEFINED &amp;&amp; currentState.corners.isNotEmpty()) {&#10;            // clear previous preview edges&#10;            visualNodes.filter { it.name == &quot;wireframe_edge_preview&quot; }&#10;                .forEach { it.parent = null }&#10;            visualNodes.removeAll { it.name == &quot;wireframe_edge_preview&quot; }&#10;&#10;            val screenCenterX = fragment.arSceneView.width / 2f&#10;            val screenCenterY = fragment.arSceneView.height / 2f&#10;            val hitResults = frame.hitTest(screenCenterX, screenCenterY)&#10;&#10;            val planeHit = hitResults.firstOrNull {&#10;                it.trackable is Plane &amp;&amp; (it.trackable as Plane).isPoseInPolygon(it.hitPose)&#10;            }&#10;&#10;            planeHit?.let { hit -&gt;&#10;                val pA = currentState.corners[0].worldPosition&#10;                val height = max(0.01f, hit.hitPose.ty() - pA.y)&#10;                val baseCornersPos = currentState.corners.map { it.worldPosition }&#10;                val topCornersPos = baseCornersPos.map {&#10;                    Vector3(it.x, pA.y + height, it.z)&#10;                }&#10;                drawWireframeBox(baseCornersPos + topCornersPos, isPreview = true)&#10;            }&#10;        } else {&#10;            visualNodes.filter { it.name == &quot;wireframe_edge_preview&quot; }&#10;                .forEach { it.parent = null }&#10;            visualNodes.removeAll { it.name == &quot;wireframe_edge_preview&quot; }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Calculates package size category and estimated price in Indonesian Rupiah&#10;     */&#10;    private fun calculatePackageSizeAndPrice(result: MeasurementResult) {&#10;        try {&#10;            // Convert dimensions from meters to centimeters&#10;            val widthCm = result.width * 100&#10;            val heightCm = result.height * 100&#10;            val depthCm = result.depth * 100&#10;&#10;            // Calculate volume in cubic centimeters&#10;            val volumeCm3 = widthCm * heightCm * depthCm&#10;&#10;            // Determine package size category and price&#10;            when {&#10;                volumeCm3 &lt;= 1000 -&gt; {&#10;                    packageSizeCategory = &quot;Kecil&quot;&#10;                    estimatedPrice = 10000 // Rp 10.000&#10;                }&#10;                volumeCm3 &lt;= 5000 -&gt; {&#10;                    packageSizeCategory = &quot;Sedang&quot;&#10;                    estimatedPrice = 20000 // Rp 20.000&#10;                }&#10;                else -&gt; {&#10;                    packageSizeCategory = &quot;Besar&quot;&#10;                    estimatedPrice = 30000 // Rp 30.000&#10;                }&#10;            }&#10;&#10;            Log.d(&quot;ARMeasurementActivity&quot;, &quot;Package category: $packageSizeCategory, Volume: ${String.format(&quot;%.1f&quot;, volumeCm3)} cm³, Price: Rp$estimatedPrice&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error calculating package size and price&quot;, e)&#10;            packageSizeCategory = &quot;Tidak diketahui&quot;&#10;            estimatedPrice = 0&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Updates the price estimation UI with calculated values&#10;     */&#10;    private fun updatePriceEstimationUI() {&#10;        try {&#10;            val priceText = if (estimatedPrice &gt; 0) {&#10;                &quot;Estimasi Harga: Rp${String.format(&quot;%,d&quot;, estimatedPrice)} ($packageSizeCategory)&quot;&#10;            } else {&#10;                &quot;Estimasi Harga: Tidak tersedia&quot;&#10;            }&#10;            tvPriceEstimation.text = priceText&#10;            tvPriceEstimation.visibility = View.VISIBLE&#10;            Log.d(&quot;ARMeasurementActivity&quot;, &quot;Price estimation UI updated: $priceText&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error updating price estimation UI&quot;, e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Resets measurement state&#10;     */&#10;    private fun resetMeasurement() {&#10;        viewModel.reset()&#10;&#10;        // Reset price estimation&#10;        estimatedPrice = 0&#10;        packageSizeCategory = &quot;&quot;&#10;        tvPriceEstimation.visibility = View.GONE&#10;&#10;        Log.d(&quot;ARMeasurementActivity&quot;, &quot;Measurement reset&quot;)&#10;    }&#10;&#10;    /**&#10;     * Proceeds to ResultActivity with measurement data and price estimation&#10;     */&#10;    private fun proceedToResults() {&#10;        val finalResult = viewModel.uiState.value.finalResult&#10;        if (finalResult == null) {&#10;            Toast.makeText(this, &quot;Tidak ada hasil pengukuran untuk disimpan&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        try {&#10;            val intent = Intent(this, ResultActivity::class.java).apply {&#10;                putExtra(ResultActivity.EXTRA_MEASUREMENT_RESULT, finalResult)&#10;                putExtra(ResultActivity.EXTRA_PACKAGE_NAME, packageNameExtra)&#10;                putExtra(ResultActivity.EXTRA_DECLARED_SIZE, declaredSizeExtra)&#10;&#10;                // Add price estimation data&#10;                putExtra(&quot;ESTIMATED_PRICE&quot;, estimatedPrice)&#10;                putExtra(&quot;PACKAGE_SIZE_CATEGORY&quot;, packageSizeCategory)&#10;            }&#10;&#10;            startActivity(intent)&#10;            finish()&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error proceeding to results&quot;, e)&#10;            Toast.makeText(this, &quot;Gagal melanjutkan ke hasil: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun navigateToResult(result: MeasurementResult) {&#10;        val intent = Intent(this, ResultActivity::class.java).apply {&#10;            putExtra(ResultActivity.EXTRA_MEASUREMENT_RESULT, result)&#10;            putExtra(ResultActivity.EXTRA_PACKAGE_NAME, packageNameExtra)&#10;            putExtra(ResultActivity.EXTRA_DECLARED_SIZE, declaredSizeExtra)&#10;&#10;            // Add price estimation data&#10;            putExtra(&quot;ESTIMATED_PRICE&quot;, estimatedPrice)&#10;            putExtra(&quot;PACKAGE_SIZE_CATEGORY&quot;, packageSizeCategory)&#10;        }&#10;&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun takePhoto() {&#10;        val fragment = arFragment ?: return&#10;&#10;        try {&#10;            // Take screenshot of AR view&#10;            val bitmap = fragment.arSceneView.drawToBitmap()&#10;            saveBitmapToGallery(bitmap)&#10;            Toast.makeText(this, &quot;Foto berhasil disimpan&quot;, Toast.LENGTH_SHORT).show()&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error taking photo&quot;, e)&#10;            Toast.makeText(this, &quot;Gagal mengambil foto: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun saveBitmapToGallery(bitmap: Bitmap) {&#10;        try {&#10;            val values = ContentValues().apply {&#10;                put(MediaStore.Images.Media.DISPLAY_NAME, &quot;AR_Measurement_${System.currentTimeMillis()}&quot;)&#10;                put(MediaStore.Images.Media.MIME_TYPE, &quot;image/jpeg&quot;)&#10;                put(MediaStore.Images.Media.RELATIVE_PATH, &quot;Pictures/PaxelAR&quot;)&#10;            }&#10;&#10;            val uri = contentResolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values)&#10;            uri?.let {&#10;                contentResolver.openOutputStream(it)?.use { outputStream -&gt;&#10;                    bitmap.compress(Bitmap.CompressFormat.JPEG, 95, outputStream)&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error saving bitmap to gallery&quot;, e)&#10;        }&#10;    }&#10;&#10;    private fun addSphere(worldPosition: Vector3) {&#10;        val sphereNode = Node().apply {&#10;            renderable = sphereRenderable&#10;            localPosition = worldPosition&#10;            parent = arFragment?.arSceneView?.scene&#10;        }&#10;        visualNodes.add(sphereNode)&#10;    }&#10;&#10;    private fun drawBase(corners: List&lt;Vector3&gt;) {&#10;        if (corners.size &lt; 4) return&#10;&#10;        // Draw base edges&#10;        for (i in corners.indices) {&#10;            val start = corners[i]&#10;            val end = corners[(i + 1) % corners.size]&#10;            drawLine(start, end)&#10;        }&#10;    }&#10;&#10;    private fun drawWireframeBox(corners: List&lt;Vector3&gt;, isPreview: Boolean = false) {&#10;        if (corners.size &lt; 8) return&#10;&#10;        val baseCorners = corners.take(4)&#10;        val topCorners = corners.drop(4)&#10;&#10;        // Draw base&#10;        for (i in baseCorners.indices) {&#10;            val start = baseCorners[i]&#10;            val end = baseCorners[(i + 1) % baseCorners.size]&#10;            drawLine(start, end, isPreview)&#10;        }&#10;&#10;        // Draw top&#10;        for (i in topCorners.indices) {&#10;            val start = topCorners[i]&#10;            val end = topCorners[(i + 1) % topCorners.size]&#10;            drawLine(start, end, isPreview)&#10;        }&#10;&#10;        // Draw vertical edges&#10;        for (i in baseCorners.indices) {&#10;            drawLine(baseCorners[i], topCorners[i], isPreview)&#10;        }&#10;    }&#10;&#10;    private fun drawLine(start: Vector3, end: Vector3, isPreview: Boolean = false) {&#10;        val lineNode = Node().apply {&#10;            renderable = lineRenderable&#10;&#10;            val direction = Vector3.subtract(end, start)&#10;            val length = direction.length()&#10;            // Fix: Use Vector3.multiply with proper static call or scale directly&#10;            val halfDirection = Vector3(direction.x * 0.5f, direction.y * 0.5f, direction.z * 0.5f)&#10;            val center = Vector3.add(start, halfDirection)&#10;&#10;            localPosition = center&#10;            localScale = Vector3(1f, 1f, length)&#10;&#10;            val rotation = Quaternion.lookRotation(direction.normalized(), Vector3.up())&#10;            localRotation = rotation&#10;&#10;            parent = arFragment?.arSceneView?.scene&#10;&#10;            if (isPreview) {&#10;                name = &quot;wireframe_edge_preview&quot;&#10;            }&#10;        }&#10;&#10;        visualNodes.add(lineNode)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        arFragment?.arSceneView?.resume()&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        arFragment?.arSceneView?.pause()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        arFragment?.arSceneView?.destroy()&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.paxel.arspacescan.ui.measurement&#10;&#10;import android.content.ContentValues&#10;import android.content.Intent&#10;import android.graphics.Bitmap&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.HandlerThread&#10;import android.provider.MediaStore&#10;import android.util.Log&#10;import android.view.PixelCopy&#10;import android.view.View&#10;import android.view.animation.AnimationUtils&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.core.view.drawToBitmap&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import com.google.android.material.button.MaterialButton&#10;import com.google.android.material.card.MaterialCardView&#10;import com.google.ar.core.Config&#10;import com.google.ar.core.Plane&#10;import com.google.ar.core.Session&#10;import com.google.ar.core.TrackingState&#10;import com.google.ar.sceneform.AnchorNode&#10;import com.google.ar.sceneform.FrameTime&#10;import com.google.ar.sceneform.Node&#10;import com.google.ar.sceneform.Scene&#10;import com.google.ar.sceneform.math.Quaternion&#10;import com.google.ar.sceneform.math.Vector3&#10;import com.google.ar.sceneform.rendering.Color&#10;import com.google.ar.sceneform.rendering.MaterialFactory&#10;import com.google.ar.sceneform.rendering.ModelRenderable&#10;import com.google.ar.sceneform.rendering.ShapeFactory&#10;import com.google.ar.sceneform.ux.ArFragment&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.data.model.MeasurementResult&#10;import com.paxel.arspacescan.ui.common.safeHapticFeedback&#10;import com.paxel.arspacescan.ui.result.ResultActivity&#10;import com.paxel.arspacescan.util.MeasurementCalculator&#10;import kotlinx.coroutines.launch&#10;import kotlin.math.max&#10;&#10;class ARMeasurementActivity : AppCompatActivity(), Scene.OnUpdateListener {&#10;&#10;    private val viewModel: ARMeasurementViewModel by viewModels {&#10;        object : ViewModelProvider.Factory {&#10;            override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;                return ARMeasurementViewModel(MeasurementCalculator()) as T&#10;            }&#10;        }&#10;    }&#10;&#10;    private var arFragment: ArFragment? = null&#10;    private lateinit var btnTakePhoto: MaterialButton&#10;    private lateinit var cvTrackingHelp: MaterialCardView&#10;    private lateinit var btnUndo: MaterialButton&#10;    private lateinit var btnReset: MaterialButton&#10;    private var sphereRenderable: ModelRenderable? = null&#10;    private var lineRenderable: ModelRenderable? = null&#10;    private val visualNodes = mutableListOf&lt;Node&gt;()&#10;    private var isArCoreSupported = true&#10;&#10;    // Price Estimation Variables&#10;    private var estimatedPrice = 0&#10;    private var packageSizeCategory = &quot;&quot;&#10;    private lateinit var tvPriceEstimation: TextView&#10;&#10;    // store incoming extras so we can forward them later safely&#10;    private var packageNameExtra: String? = null&#10;    private var declaredSizeExtra: String? = null&#10;&#10;    // Toast spam prevention&#10;    private var lastToastTime = 0L&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_ar_measurement)&#10;&#10;        // store extras early&#10;        packageNameExtra = intent.getStringExtra(&quot;PACKAGE_NAME&quot;)&#10;        declaredSizeExtra = intent.getStringExtra(&quot;DECLARED_SIZE&quot;)&#10;&#10;        checkARCoreSupport()&#10;        if (!isArCoreSupported) {&#10;            Toast.makeText(this, &quot;ARCore tidak didukung di perangkat ini&quot;, Toast.LENGTH_LONG).show()&#10;            finish()&#10;            return&#10;        }&#10;&#10;        setupUI()&#10;        createRenderables()&#10;        setupAR()&#10;        observeViewModel()&#10;    }&#10;&#10;    private fun checkARCoreSupport() {&#10;        try {&#10;            val availability = com.google.ar.core.ArCoreApk.getInstance().checkAvailability(this)&#10;            isArCoreSupported = availability.isSupported || availability.isTransient&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;ARCore check failed&quot;, e)&#10;            isArCoreSupported = false&#10;        }&#10;    }&#10;&#10;    private fun setupUI() {&#10;        btnUndo = findViewById(R.id.btnUndo)&#10;        btnReset = findViewById(R.id.btnReset)&#10;        btnTakePhoto = findViewById(R.id.btnTakePhoto)&#10;        cvTrackingHelp = findViewById(R.id.cvTrackingHelp)&#10;&#10;        // Initialize Price Estimation UI&#10;        tvPriceEstimation = findViewById(R.id.tvPriceEstimation)&#10;&#10;        // Tambahkan tombol lanjutkan ke hasil&#10;        val btnContinueToResult = findViewById&lt;MaterialButton&gt;(R.id.btnContinueToResult)&#10;&#10;        btnUndo.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            viewModel.undoLastPoint()&#10;        }&#10;        btnReset.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            resetMeasurement()&#10;        }&#10;        btnTakePhoto.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            takePhoto()&#10;        }&#10;&#10;        // Setup tombol lanjutkan ke hasil&#10;        btnContinueToResult.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            proceedToResults()&#10;        }&#10;    }&#10;&#10;    private fun setupAR() {&#10;        try {&#10;            arFragment = (supportFragmentManager.findFragmentById(R.id.arFragment) as? CustomArFragment)&#10;                ?: throw IllegalStateException(&quot;CustomArFragment not found in layout&quot;)&#10;&#10;            // Configure ARCore session to prevent light estimation crash&#10;            arFragment?.arSceneView?.let { sceneView -&gt;&#10;                sceneView.planeRenderer.isEnabled = true&#10;                sceneView.planeRenderer.isVisible = true&#10;            }&#10;&#10;            // add update listener&#10;            arFragment?.arSceneView?.scene?.addOnUpdateListener(this)&#10;&#10;            // Enhanced tap listener with better error handling&#10;            arFragment?.setOnTapArPlaneListener { hitResult, plane, _ -&gt;&#10;                val fragment = arFragment ?: return@setOnTapArPlaneListener&#10;&#10;                // Enhanced plane tracking validation&#10;                if (plane.trackingState != TrackingState.TRACKING) {&#10;                    Log.w(&quot;ARMeasurementActivity&quot;, &quot;Tap diabaikan: plane belum tracking.&quot;)&#10;                    showUserFeedback(&quot;Tunggu hingga permukaan terdeteksi dengan baik&quot;)&#10;                    return@setOnTapArPlaneListener&#10;                }&#10;&#10;                // Validate hit result quality&#10;                if (!isHitResultValid(hitResult, plane)) {&#10;                    showUserFeedback(&quot;Ketuk area yang lebih stabil untuk hasil terbaik&quot;)&#10;                    return@setOnTapArPlaneListener&#10;                }&#10;&#10;                if (viewModel.uiState.value.step != MeasurementStep.COMPLETED) {&#10;                    fragment.view?.safeHapticFeedback()&#10;                    val anchor = hitResult.createAnchor()&#10;                    val anchorNode = AnchorNode(anchor).apply {&#10;                        parent = fragment.arSceneView.scene&#10;                    }&#10;                    if (anchorNode.anchor == null) {&#10;                        Log.e(&quot;ARMeasurementActivity&quot;, &quot;Anchor gagal dibuat.&quot;)&#10;                        showUserFeedback(&quot;Gagal membuat titik pengukuran, coba lagi&quot;)&#10;                        return@setOnTapArPlaneListener&#10;                    }&#10;                    viewModel.handleArTap(anchorNode, this@ARMeasurementActivity)&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;AR setup failed&quot;, e)&#10;            Toast.makeText(this, &quot;Gagal memulai AR: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;            finish()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Validates hit result quality for better measurement accuracy&#10;     */&#10;    private fun isHitResultValid(hitResult: com.google.ar.core.HitResult, plane: Plane): Boolean {&#10;        return try {&#10;            // Check if hit pose is within plane polygon&#10;            plane.isPoseInPolygon(hitResult.hitPose) &amp;&amp;&#10;                    // Ensure reasonable distance (0.1m to 5m)&#10;                    hitResult.distance in 0.1f..5.0f &amp;&amp;&#10;                    // Check tracking confidence&#10;                    plane.trackingState == TrackingState.TRACKING&#10;        } catch (e: Exception) {&#10;            Log.w(&quot;ARMeasurementActivity&quot;, &quot;Hit result validation failed&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Shows user feedback for ARCore issues&#10;     */&#10;    private fun showUserFeedback(message: String) {&#10;        // Prevent toast spam - only show if last toast was &gt;2 seconds ago&#10;        val currentTime = System.currentTimeMillis()&#10;        if (currentTime - lastToastTime &gt; 2000) {&#10;            Toast.makeText(this, message, Toast.LENGTH_SHORT).show()&#10;            lastToastTime = currentTime&#10;        }&#10;    }&#10;&#10;    private fun createRenderables() {&#10;        MaterialFactory.makeOpaqueWithColor(this, Color(android.graphics.Color.RED))&#10;            .thenAccept { material -&gt;&#10;                sphereRenderable = ShapeFactory.makeSphere(0.01f, Vector3.zero(), material)&#10;            }&#10;            .exceptionally { e -&gt;&#10;                Log.e(&quot;ARMeasurementActivity&quot;, &quot;Failed to create sphere renderable&quot;, e)&#10;                null&#10;            }&#10;&#10;        MaterialFactory.makeOpaqueWithColor(this, Color(android.graphics.Color.YELLOW))&#10;            .thenAccept { material -&gt;&#10;                lineRenderable = ShapeFactory.makeCube(&#10;                    Vector3(0.005f, 0.001f, 1f),&#10;                    Vector3.zero(),&#10;                    material&#10;                )&#10;            }&#10;            .exceptionally { e -&gt;&#10;                Log.e(&quot;ARMeasurementActivity&quot;, &quot;Failed to create line renderable&quot;, e)&#10;                null&#10;            }&#10;    }&#10;&#10;    private fun observeViewModel() {&#10;        val tvInstructions: TextView = findViewById(R.id.tvInstructions)&#10;        val fadeInAnimation = AnimationUtils.loadAnimation(this, R.anim.fade_in)&#10;&#10;        lifecycleScope.launch {&#10;            repeatOnLifecycle(Lifecycle.State.STARTED) {&#10;                launch {&#10;                    viewModel.uiState.collect { state -&gt;&#10;                        tvInstructions.apply {&#10;                            val newText = getString(state.instructionTextId)&#10;                            if (text != newText) {&#10;                                text = newText&#10;                                startAnimation(fadeInAnimation)&#10;                            }&#10;                        }&#10;                        btnUndo.isEnabled = state.isUndoEnabled&#10;                        updateArScene(state)&#10;                    }&#10;                }&#10;&#10;                launch {&#10;                    viewModel.navigationEvent.collect { result -&gt;&#10;                        navigateToResult(result)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun updateArScene(state: ARMeasurementUiState) {&#10;        // remove previous visuals&#10;        visualNodes.forEach { it.parent = null }&#10;        visualNodes.clear()&#10;&#10;        // show/hide take photo button&#10;        btnTakePhoto.visibility =&#10;            if (state.step == MeasurementStep.COMPLETED) View.VISIBLE else View.GONE&#10;&#10;        // show/hide continue to result button&#10;        val btnContinueToResult = findViewById&lt;MaterialButton&gt;(R.id.btnContinueToResult)&#10;        btnContinueToResult.visibility =&#10;            if (state.step == MeasurementStep.COMPLETED) View.VISIBLE else View.GONE&#10;&#10;        // add point spheres&#10;        state.points.forEach { addSphere(it.worldPosition) }&#10;&#10;        when (state.step) {&#10;            MeasurementStep.BASE_DEFINED -&gt; {&#10;                val cornerPositions = state.corners.map { it.worldPosition }&#10;                if (cornerPositions.size &gt;= 4) drawBase(cornerPositions)&#10;            }&#10;&#10;            MeasurementStep.COMPLETED -&gt; {&#10;                val cornerPositions = state.corners.map { it.worldPosition }&#10;                if (cornerPositions.size == 8) drawWireframeBox(cornerPositions)&#10;&#10;                // Calculate package size and price when measurement is completed&#10;                state.finalResult?.let { result -&gt;&#10;                    calculatePackageSizeAndPrice(result)&#10;                    updatePriceEstimationUI()&#10;                }&#10;            }&#10;&#10;            else -&gt; { /* START or other states */&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onUpdate(frameTime: FrameTime?) {&#10;        val fragment = arFragment ?: return&#10;        val frame = fragment.arSceneView.arFrame ?: return&#10;        val isTracking = frame.camera.trackingState == TrackingState.TRACKING&#10;        cvTrackingHelp.visibility = if (isTracking) View.GONE else View.VISIBLE&#10;&#10;        val currentState = viewModel.uiState.value&#10;        if (isTracking &amp;&amp; currentState.step == MeasurementStep.BASE_DEFINED &amp;&amp; currentState.corners.isNotEmpty()) {&#10;            // clear previous preview edges&#10;            visualNodes.filter { it.name == &quot;wireframe_edge_preview&quot; }&#10;                .forEach { it.parent = null }&#10;            visualNodes.removeAll { it.name == &quot;wireframe_edge_preview&quot; }&#10;&#10;            val screenCenterX = fragment.arSceneView.width / 2f&#10;            val screenCenterY = fragment.arSceneView.height / 2f&#10;            val hitResults = frame.hitTest(screenCenterX, screenCenterY)&#10;&#10;            val planeHit = hitResults.firstOrNull {&#10;                it.trackable is Plane &amp;&amp; (it.trackable as Plane).isPoseInPolygon(it.hitPose)&#10;            }&#10;&#10;            planeHit?.let { hit -&gt;&#10;                val pA = currentState.corners[0].worldPosition&#10;                val height = max(0.01f, hit.hitPose.ty() - pA.y)&#10;                val baseCornersPos = currentState.corners.map { it.worldPosition }&#10;                val topCornersPos = baseCornersPos.map {&#10;                    Vector3(it.x, pA.y + height, it.z)&#10;                }&#10;                drawWireframeBox(baseCornersPos + topCornersPos, isPreview = true)&#10;            }&#10;        } else {&#10;            visualNodes.filter { it.name == &quot;wireframe_edge_preview&quot; }&#10;                .forEach { it.parent = null }&#10;            visualNodes.removeAll { it.name == &quot;wireframe_edge_preview&quot; }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Calculates package size category and estimated price in Indonesian Rupiah&#10;     */&#10;    private fun calculatePackageSizeAndPrice(result: MeasurementResult) {&#10;        try {&#10;            // Convert dimensions from meters to centimeters&#10;            val widthCm = result.width * 100&#10;            val heightCm = result.height * 100&#10;            val depthCm = result.depth * 100&#10;&#10;            // Calculate volume in cubic centimeters&#10;            val volumeCm3 = widthCm * heightCm * depthCm&#10;&#10;            // Determine package size category and price&#10;            when {&#10;                volumeCm3 &lt;= 1000 -&gt; {&#10;                    packageSizeCategory = &quot;Kecil&quot;&#10;                    estimatedPrice = 10000 // Rp 10.000&#10;                }&#10;                volumeCm3 &lt;= 5000 -&gt; {&#10;                    packageSizeCategory = &quot;Sedang&quot;&#10;                    estimatedPrice = 20000 // Rp 20.000&#10;                }&#10;                else -&gt; {&#10;                    packageSizeCategory = &quot;Besar&quot;&#10;                    estimatedPrice = 30000 // Rp 30.000&#10;                }&#10;            }&#10;&#10;            Log.d(&quot;ARMeasurementActivity&quot;, &quot;Package category: $packageSizeCategory, Volume: ${String.format(&quot;%.1f&quot;, volumeCm3)} cm³, Price: Rp$estimatedPrice&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error calculating package size and price&quot;, e)&#10;            packageSizeCategory = &quot;Tidak diketahui&quot;&#10;            estimatedPrice = 0&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Updates the price estimation UI with calculated values&#10;     */&#10;    private fun updatePriceEstimationUI() {&#10;        try {&#10;            val priceText = if (estimatedPrice &gt; 0) {&#10;                &quot;Estimasi Harga: Rp${String.format(&quot;%,d&quot;, estimatedPrice)} ($packageSizeCategory)&quot;&#10;            } else {&#10;                &quot;Estimasi Harga: Tidak tersedia&quot;&#10;            }&#10;            tvPriceEstimation.text = priceText&#10;            tvPriceEstimation.visibility = View.VISIBLE&#10;            Log.d(&quot;ARMeasurementActivity&quot;, &quot;Price estimation UI updated: $priceText&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error updating price estimation UI&quot;, e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Resets measurement state&#10;     */&#10;    private fun resetMeasurement() {&#10;        viewModel.reset()&#10;&#10;        // Reset price estimation&#10;        estimatedPrice = 0&#10;        packageSizeCategory = &quot;&quot;&#10;        tvPriceEstimation.visibility = View.GONE&#10;&#10;        Log.d(&quot;ARMeasurementActivity&quot;, &quot;Measurement reset&quot;)&#10;    }&#10;&#10;    /**&#10;     * Proceeds to ResultActivity with measurement data and price estimation&#10;     */&#10;    private fun proceedToResults() {&#10;        val finalResult = viewModel.uiState.value.finalResult&#10;        if (finalResult == null) {&#10;            Toast.makeText(this, &quot;Tidak ada hasil pengukuran untuk disimpan&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        try {&#10;            val intent = Intent(this, ResultActivity::class.java).apply {&#10;                putExtra(ResultActivity.EXTRA_MEASUREMENT_RESULT, finalResult)&#10;                putExtra(ResultActivity.EXTRA_PACKAGE_NAME, packageNameExtra)&#10;                putExtra(ResultActivity.EXTRA_DECLARED_SIZE, declaredSizeExtra)&#10;&#10;                // Add price estimation data&#10;                putExtra(&quot;ESTIMATED_PRICE&quot;, estimatedPrice)&#10;                putExtra(&quot;PACKAGE_SIZE_CATEGORY&quot;, packageSizeCategory)&#10;            }&#10;&#10;            startActivity(intent)&#10;            finish()&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error proceeding to results&quot;, e)&#10;            Toast.makeText(this, &quot;Gagal melanjutkan ke hasil: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun navigateToResult(result: MeasurementResult) {&#10;        val intent = Intent(this, ResultActivity::class.java).apply {&#10;            putExtra(ResultActivity.EXTRA_MEASUREMENT_RESULT, result)&#10;            putExtra(ResultActivity.EXTRA_PACKAGE_NAME, packageNameExtra)&#10;            putExtra(ResultActivity.EXTRA_DECLARED_SIZE, declaredSizeExtra)&#10;&#10;            // Add price estimation data&#10;            putExtra(&quot;ESTIMATED_PRICE&quot;, estimatedPrice)&#10;            putExtra(&quot;PACKAGE_SIZE_CATEGORY&quot;, packageSizeCategory)&#10;        }&#10;&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun takePhoto() {&#10;        val fragment = arFragment ?: return&#10;&#10;        try {&#10;            // Take screenshot of AR view&#10;            val bitmap = fragment.arSceneView.drawToBitmap()&#10;            saveBitmapToGallery(bitmap)&#10;            Toast.makeText(this, &quot;Foto berhasil disimpan&quot;, Toast.LENGTH_SHORT).show()&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error taking photo&quot;, e)&#10;            Toast.makeText(this, &quot;Gagal mengambil foto: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun saveBitmapToGallery(bitmap: Bitmap) {&#10;        try {&#10;            val values = ContentValues().apply {&#10;                put(MediaStore.Images.Media.DISPLAY_NAME, &quot;AR_Measurement_${System.currentTimeMillis()}&quot;)&#10;                put(MediaStore.Images.Media.MIME_TYPE, &quot;image/jpeg&quot;)&#10;                put(MediaStore.Images.Media.RELATIVE_PATH, &quot;Pictures/PaxelAR&quot;)&#10;            }&#10;&#10;            val uri = contentResolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values)&#10;            uri?.let {&#10;                contentResolver.openOutputStream(it)?.use { outputStream -&gt;&#10;                    bitmap.compress(Bitmap.CompressFormat.JPEG, 95, outputStream)&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error saving bitmap to gallery&quot;, e)&#10;        }&#10;    }&#10;&#10;    private fun addSphere(worldPosition: Vector3) {&#10;        val sphereNode = Node().apply {&#10;            renderable = sphereRenderable&#10;            localPosition = worldPosition&#10;            parent = arFragment?.arSceneView?.scene&#10;        }&#10;        visualNodes.add(sphereNode)&#10;    }&#10;&#10;    private fun drawBase(corners: List&lt;Vector3&gt;) {&#10;        if (corners.size &lt; 4) return&#10;&#10;        // Draw base edges&#10;        for (i in corners.indices) {&#10;            val start = corners[i]&#10;            val end = corners[(i + 1) % corners.size]&#10;            drawLine(start, end)&#10;        }&#10;    }&#10;&#10;    private fun drawWireframeBox(corners: List&lt;Vector3&gt;, isPreview: Boolean = false) {&#10;        if (corners.size &lt; 8) return&#10;&#10;        val baseCorners = corners.take(4)&#10;        val topCorners = corners.drop(4)&#10;&#10;        // Draw base&#10;        for (i in baseCorners.indices) {&#10;            val start = baseCorners[i]&#10;            val end = baseCorners[(i + 1) % baseCorners.size]&#10;            drawLine(start, end, isPreview)&#10;        }&#10;&#10;        // Draw top&#10;        for (i in topCorners.indices) {&#10;            val start = topCorners[i]&#10;            val end = topCorners[(i + 1) % topCorners.size]&#10;            drawLine(start, end, isPreview)&#10;        }&#10;&#10;        // Draw vertical edges&#10;        for (i in baseCorners.indices) {&#10;            drawLine(baseCorners[i], topCorners[i], isPreview)&#10;        }&#10;    }&#10;&#10;    private fun drawLine(start: Vector3, end: Vector3, isPreview: Boolean = false) {&#10;        val lineNode = Node().apply {&#10;            renderable = lineRenderable&#10;&#10;            val direction = Vector3.subtract(end, start)&#10;            val length = direction.length()&#10;            // Fix: Use Vector3.multiply with proper static call or scale directly&#10;            val halfDirection = Vector3(direction.x * 0.5f, direction.y * 0.5f, direction.z * 0.5f)&#10;            val center = Vector3.add(start, halfDirection)&#10;&#10;            localPosition = center&#10;            localScale = Vector3(1f, 1f, length)&#10;&#10;            val rotation = Quaternion.lookRotation(direction.normalized(), Vector3.up())&#10;            localRotation = rotation&#10;&#10;            parent = arFragment?.arSceneView?.scene&#10;&#10;            if (isPreview) {&#10;                name = &quot;wireframe_edge_preview&quot;&#10;            }&#10;        }&#10;&#10;        visualNodes.add(lineNode)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        arFragment?.arSceneView?.resume()&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        arFragment?.arSceneView?.pause()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        arFragment?.arSceneView?.destroy()&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/result/ResultActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/result/ResultActivity.kt" />
              <option name="originalContent" value="package com.paxel.arspacescan.ui.result&#10;&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.OnBackPressedCallback&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.lifecycleScope&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.databinding.ActivityResultBinding&#10;import com.paxel.arspacescan.data.local.AppDatabase&#10;import com.paxel.arspacescan.data.model.MeasurementResult&#10;import com.paxel.arspacescan.data.repository.MeasurementRepository&#10;import com.paxel.arspacescan.ui.main.MainActivity&#10;import com.paxel.arspacescan.ui.history.HistoryActivity&#10;import kotlinx.coroutines.launch&#10;import java.text.DecimalFormat&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class ResultActivity : AppCompatActivity() {&#10;&#10;    private lateinit var binding: ActivityResultBinding&#10;    private lateinit var measurementViewModel: MeasurementViewModel&#10;    private var measurementResult: MeasurementResult? = null&#10;    private var savedMeasurementId: Long? = null&#10;    private var isSaved = false&#10;&#10;    companion object {&#10;        const val EXTRA_MEASUREMENT_RESULT = &quot;MEASUREMENT_RESULT&quot;&#10;        const val EXTRA_PACKAGE_NAME = &quot;PACKAGE_NAME&quot;&#10;        const val EXTRA_DECLARED_SIZE = &quot;DECLARED_SIZE&quot;&#10;        const val EXTRA_MEASUREMENT_ID = &quot;MEASUREMENT_ID&quot;&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        binding = ActivityResultBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        setupActionBar()&#10;        setupViewModel()&#10;        setupUI()&#10;        setupBackPressedHandler()&#10;        retrieveAndDisplayData()&#10;    }&#10;&#10;    private fun setupActionBar() {&#10;        binding.toolbar?.let { toolbar -&gt;&#10;            try {&#10;                // Check if we already have an action bar&#10;                if (supportActionBar == null) {&#10;                    setSupportActionBar(toolbar)&#10;                    supportActionBar?.apply {&#10;                        setDisplayHomeAsUpEnabled(true)&#10;                        setDisplayShowHomeEnabled(true)&#10;                        title = &quot;Hasil Pengukuran&quot;&#10;                    }&#10;                } else {&#10;                    // Use existing action bar&#10;                    supportActionBar?.apply {&#10;                        setDisplayHomeAsUpEnabled(true)&#10;                        setDisplayShowHomeEnabled(true)&#10;                        title = &quot;Hasil Pengukuran&quot;&#10;                    }&#10;                }&#10;            } catch (e: IllegalStateException) {&#10;                Log.e(&quot;ResultActivity&quot;, &quot;ActionBar already exists, using toolbar directly: ${e.message}&quot;)&#10;                // Fallback: use toolbar directly without setSupportActionBar&#10;                toolbar.title = &quot;Hasil Pengukuran&quot;&#10;                toolbar.setNavigationIcon(androidx.appcompat.R.drawable.abc_ic_ab_back_material)&#10;                toolbar.setNavigationOnClickListener {&#10;                    onBackPressedDispatcher.onBackPressed()&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;ResultActivity&quot;, &quot;ActionBar setup failed: ${e.message}&quot;)&#10;                // Final fallback: basic toolbar setup&#10;                binding.toolbar?.let { tb -&gt;&#10;                    tb.title = &quot;Hasil Pengukuran&quot;&#10;                    tb.setNavigationOnClickListener {&#10;                        onBackPressedDispatcher.onBackPressed()&#10;                    }&#10;                }&#10;            }&#10;        } ?: run {&#10;            // No toolbar in layout, use default action bar&#10;            supportActionBar?.apply {&#10;                setDisplayHomeAsUpEnabled(true)&#10;                setDisplayShowHomeEnabled(true)&#10;                title = &quot;Hasil Pengukuran&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupViewModel() {&#10;        val database = AppDatabase.getDatabase(this)&#10;        val repository = MeasurementRepository(database.measurementDao())&#10;        val viewModelFactory = MeasurementViewModelFactory(repository)&#10;        measurementViewModel = ViewModelProvider(this, viewModelFactory)[MeasurementViewModel::class.java]&#10;    }&#10;&#10;    private fun setupUI() {&#10;        setupButtons()&#10;    }&#10;&#10;    private fun setupButtons() {&#10;        // Reference buttons from the new layout&#10;        binding.btnSaveResult.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            if (!isSaved) {&#10;                saveMeasurement()&#10;            } else {&#10;                Toast.makeText(this, &quot;Hasil sudah tersimpan&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;&#10;        binding.btnNewMeasurement.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            startNewMeasurement()&#10;        }&#10;    }&#10;&#10;    private fun setupBackPressedHandler() {&#10;        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {&#10;            override fun handleOnBackPressed() {&#10;                if (!isSaved &amp;&amp; measurementResult != null) {&#10;                    showSaveConfirmationDialog()&#10;                } else {&#10;                    finish()&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun retrieveAndDisplayData() {&#10;        measurementResult = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            intent.getParcelableExtra(EXTRA_MEASUREMENT_RESULT, MeasurementResult::class.java)&#10;        } else {&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            intent.getParcelableExtra(EXTRA_MEASUREMENT_RESULT)&#10;        }&#10;&#10;        val packageName = intent.getStringExtra(EXTRA_PACKAGE_NAME)&#10;        val declaredSize = intent.getStringExtra(EXTRA_DECLARED_SIZE)&#10;        val measurementId = intent.getLongExtra(EXTRA_MEASUREMENT_ID, -1L)&#10;&#10;        measurementResult?.let { result -&gt;&#10;            displayMeasurementResult(result, packageName, declaredSize)&#10;        } ?: run {&#10;            if (measurementId != -1L) {&#10;                loadMeasurementFromDatabase(measurementId)&#10;            } else {&#10;                showError(&quot;Data pengukuran tidak ditemukan&quot;)&#10;                finish()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadMeasurementFromDatabase(measurementId: Long) {&#10;        lifecycleScope.launch {&#10;            try {&#10;                measurementViewModel.getMeasurementById(measurementId).collect { result -&gt;&#10;                    if (result != null) {&#10;                        measurementResult = result&#10;                        isSaved = true&#10;                        savedMeasurementId = measurementId&#10;                        displayMeasurementResult(result, result.packageName, result.declaredSize)&#10;                    } else {&#10;                        showError(&quot;Pengukuran tidak ditemukan&quot;)&#10;                        finish()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;ResultActivity&quot;, &quot;Error loading measurement&quot;, e)&#10;                showError(&quot;Error memuat pengukuran: ${e.message}&quot;)&#10;                finish()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun displayMeasurementData() {&#10;        measurementResult?.let { result -&gt;&#10;            val decimalFormat = DecimalFormat(&quot;#.##&quot;)&#10;&#10;            // Display measurement data using the new layout IDs&#10;            binding.tvWidth.text = &quot;${decimalFormat.format(result.width * 100)} cm&quot;&#10;            binding.tvHeight.text = &quot;${decimalFormat.format(result.height * 100)} cm&quot;&#10;            binding.tvDepth.text = &quot;${decimalFormat.format(result.depth * 100)} cm&quot;&#10;            binding.tvVolume.text = &quot;${decimalFormat.format(result.volume * 1000000)} cm³&quot;&#10;&#10;            // Display package information&#10;            binding.tvPackageName.text = &quot;Nama Paket: ${intent.getStringExtra(EXTRA_PACKAGE_NAME) ?: &quot;Default&quot;}&quot;&#10;            binding.tvDeclaredSize.text = &quot;Ukuran Deklarasi: ${intent.getStringExtra(EXTRA_DECLARED_SIZE) ?: &quot;Tidak ditentukan&quot;}&quot;&#10;&#10;            // Display timestamp&#10;            val dateFormat = SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;, Locale.getDefault())&#10;            binding.tvTimestamp.text = &quot;Waktu: ${dateFormat.format(Date())}&quot;&#10;&#10;            // Display price estimation if available&#10;            val estimatedPrice = intent.getIntExtra(&quot;ESTIMATED_PRICE&quot;, 0)&#10;            val sizeCategory = intent.getStringExtra(&quot;PACKAGE_SIZE_CATEGORY&quot;) ?: &quot;&quot;&#10;&#10;            if (estimatedPrice &gt; 0) {&#10;                binding.cvPriceEstimation.visibility = android.view.View.VISIBLE&#10;                binding.tvEstimatedPrice.text = &quot;Rp${String.format(&quot;%,d&quot;, estimatedPrice)}&quot;&#10;                binding.tvSizeCategory.text = &quot;Kategori: $sizeCategory&quot;&#10;            } else {&#10;                binding.cvPriceEstimation.visibility = android.view.View.GONE&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun displayMeasurementResult(result: MeasurementResult, packageName: String?, declaredSize: String?) {&#10;        val decimalFormat = DecimalFormat(&quot;#.##&quot;)&#10;        val dateFormat = SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;, Locale.getDefault())&#10;&#10;        // Convert measurements from meters to centimeters for display&#10;        val widthCm = result.width * 100&#10;        val heightCm = result.height * 100&#10;        val depthCm = result.depth * 100&#10;        val volumeCm3 = (result.volume * 1_000_000).toDouble() // m³ to cm³&#10;&#10;        // Use the correct View binding references&#10;        binding.tvWidth.text = &quot;${decimalFormat.format(widthCm)} cm&quot;&#10;        binding.tvHeight.text = &quot;${decimalFormat.format(heightCm)} cm&quot;&#10;        binding.tvDepth.text = &quot;${decimalFormat.format(depthCm)} cm&quot;&#10;        binding.tvVolume.text = &quot;${decimalFormat.format(volumeCm3)} cm³&quot;&#10;&#10;        // Display timestamp&#10;        binding.tvTimestamp.text = &quot;Waktu: ${dateFormat.format(Date(result.timestamp))}&quot;&#10;&#10;        // Display package information&#10;        binding.tvPackageName.text = &quot;Nama Paket: ${packageName ?: &quot;Tidak ada nama paket&quot;}&quot;&#10;        binding.tvDeclaredSize.text = &quot;Ukuran Deklarasi: ${declaredSize ?: &quot;Tidak ditentukan&quot;}&quot;&#10;&#10;        // Calculate and display size category and price&#10;        displaySizeCategoryAndPrice(volumeCm3)&#10;        updateSaveButtonState()&#10;    }&#10;&#10;    private fun displaySizeCategoryAndPrice(volumeCm3: Double) {&#10;        val (category, price) = when {&#10;            volumeCm3 &lt;= 1000 -&gt; &quot;Kecil&quot; to 10000&#10;            volumeCm3 &lt;= 5000 -&gt; &quot;Sedang&quot; to 20000&#10;            else -&gt; &quot;Besar&quot; to 30000&#10;        }&#10;&#10;        // Display price estimation&#10;        binding.cvPriceEstimation.visibility = android.view.View.VISIBLE&#10;        binding.tvEstimatedPrice.text = &quot;Rp${String.format(&quot;%,d&quot;, price)}&quot;&#10;        binding.tvSizeCategory.text = &quot;Kategori: $category&quot;&#10;    }&#10;&#10;    private fun updateSaveButtonState() {&#10;        if (isSaved) {&#10;            binding.btnSaveResult.apply {&#10;                text = &quot;Tersimpan&quot;&#10;                isEnabled = false&#10;                alpha = 0.6f&#10;            }&#10;            binding.cvSaveStatus.visibility = android.view.View.VISIBLE&#10;            binding.tvSaveStatus.text = &quot;Status: Tersimpan&quot;&#10;        } else {&#10;            binding.btnSaveResult.apply {&#10;                text = getString(R.string.btn_save)&#10;                isEnabled = true&#10;                alpha = 1.0f&#10;            }&#10;            binding.cvSaveStatus.visibility = android.view.View.GONE&#10;        }&#10;    }&#10;&#10;    private fun saveMeasurement() {&#10;        val result = measurementResult ?: return&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                val packageName = intent.getStringExtra(EXTRA_PACKAGE_NAME)&#10;                val declaredSize = intent.getStringExtra(EXTRA_DECLARED_SIZE)&#10;&#10;                // Buat MeasurementResult baru dengan data tambahan&#10;                val resultToSave = MeasurementResult(&#10;                    id = result.id,&#10;                    width = result.width,&#10;                    height = result.height,&#10;                    depth = result.depth,&#10;                    volume = result.volume,&#10;                    timestamp = result.timestamp,&#10;                    packageName = packageName,&#10;                    declaredSize = declaredSize&#10;                )&#10;&#10;                val id = measurementViewModel.saveMeasurement(resultToSave)&#10;                savedMeasurementId = id&#10;                isSaved = true&#10;                updateSaveButtonState()&#10;&#10;                Toast.makeText(this@ResultActivity, &quot;Hasil pengukuran berhasil disimpan&quot;, Toast.LENGTH_SHORT).show()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;ResultActivity&quot;, &quot;Error saving measurement&quot;, e)&#10;                Toast.makeText(this@ResultActivity, &quot;Gagal menyimpan: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startNewMeasurement() {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun navigateToHistory() {&#10;        val intent = Intent(this, HistoryActivity::class.java)&#10;        startActivity(intent)&#10;    }&#10;&#10;    private fun showSaveConfirmationDialog() {&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Simpan Hasil?&quot;)&#10;            .setMessage(&quot;Apakah Anda ingin menyimpan hasil pengukuran sebelum keluar?&quot;)&#10;            .setPositiveButton(&quot;Simpan&quot;) { _, _ -&gt;&#10;                saveMeasurement()&#10;                finish()&#10;            }&#10;            .setNegativeButton(&quot;Keluar Tanpa Menyimpan&quot;) { _, _ -&gt;&#10;                finish()&#10;            }&#10;            .setNeutralButton(&quot;Batal&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showError(message: String) {&#10;        Toast.makeText(this, message, Toast.LENGTH_LONG).show()&#10;        Log.e(&quot;ResultActivity&quot;, message)&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu?): Boolean {&#10;        menuInflater.inflate(R.menu.result_menu, menu)&#10;        return true&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            android.R.id.home -&gt; {&#10;                onBackPressedDispatcher.onBackPressed()&#10;                true&#10;            }&#10;            R.id.action_share -&gt; {&#10;                shareMeasurementResult()&#10;                true&#10;            }&#10;            R.id.action_delete -&gt; {&#10;                deleteMeasurement()&#10;                true&#10;            }&#10;            R.id.action_history -&gt; {&#10;                navigateToHistory()&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    private fun shareMeasurementResult() {&#10;        val measurementData = measurementResult ?: return&#10;        val decimalFormat = DecimalFormat(&quot;#.##&quot;)&#10;&#10;        val widthCm = measurementData.width * 100&#10;        val heightCm = measurementData.height * 100&#10;        val depthCm = measurementData.depth * 100&#10;        val volumeCm3 = measurementData.volume * 1_000_000&#10;&#10;        val shareText = &quot;&quot;&quot;&#10;            Hasil Pengukuran AR&#10;            &#10;            Dimensi:&#10;            Lebar: ${decimalFormat.format(widthCm)} cm&#10;            Tinggi: ${decimalFormat.format(heightCm)} cm&#10;            Panjang: ${decimalFormat.format(depthCm)} cm&#10;            Volume: ${decimalFormat.format(volumeCm3)} cm³&#10;            &#10;            Diukur dengan Paxel AR Validator&#10;        &quot;&quot;&quot;.trimIndent()&#10;&#10;        val shareIntent = Intent().apply {&#10;            action = Intent.ACTION_SEND&#10;            putExtra(Intent.EXTRA_TEXT, shareText)&#10;            type = &quot;text/plain&quot;&#10;        }&#10;        startActivity(Intent.createChooser(shareIntent, &quot;Bagikan Hasil Pengukuran&quot;))&#10;    }&#10;&#10;    private fun deleteMeasurement() {&#10;        val id = savedMeasurementId ?: return&#10;&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Hapus Pengukuran&quot;)&#10;            .setMessage(&quot;Apakah Anda yakin ingin menghapus hasil pengukuran ini?&quot;)&#10;            .setPositiveButton(&quot;Hapus&quot;) { _, _ -&gt;&#10;                lifecycleScope.launch {&#10;                    try {&#10;                        measurementViewModel.deleteMeasurementById(id)&#10;                        Toast.makeText(this@ResultActivity, &quot;Pengukuran berhasil dihapus&quot;, Toast.LENGTH_SHORT).show()&#10;                        finish()&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;ResultActivity&quot;, &quot;Error deleting measurement&quot;, e)&#10;                        Toast.makeText(this@ResultActivity, &quot;Gagal menghapus: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            }&#10;            .setNegativeButton(&quot;Batal&quot;, null)&#10;            .show()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.paxel.arspacescan.ui.result&#10;&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import android.view.View&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.OnBackPressedCallback&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.lifecycleScope&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.databinding.ActivityResultBinding&#10;import com.paxel.arspacescan.data.local.AppDatabase&#10;import com.paxel.arspacescan.data.model.MeasurementResult&#10;import com.paxel.arspacescan.data.repository.MeasurementRepository&#10;import com.paxel.arspacescan.ui.main.MainActivity&#10;import com.paxel.arspacescan.ui.history.HistoryActivity&#10;import com.paxel.arspacescan.ui.common.safeHapticFeedback&#10;import kotlinx.coroutines.launch&#10;import java.text.DecimalFormat&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class ResultActivity : AppCompatActivity() {&#10;&#10;    private lateinit var binding: ActivityResultBinding&#10;    private lateinit var measurementViewModel: MeasurementViewModel&#10;    private var measurementResult: MeasurementResult? = null&#10;    private var savedMeasurementId: Long? = null&#10;    private var isSaved = false&#10;&#10;    companion object {&#10;        const val EXTRA_MEASUREMENT_RESULT = &quot;MEASUREMENT_RESULT&quot;&#10;        const val EXTRA_PACKAGE_NAME = &quot;PACKAGE_NAME&quot;&#10;        const val EXTRA_DECLARED_SIZE = &quot;DECLARED_SIZE&quot;&#10;        const val EXTRA_MEASUREMENT_ID = &quot;MEASUREMENT_ID&quot;&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        binding = ActivityResultBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        setupActionBar()&#10;        setupViewModel()&#10;        setupUI()&#10;        setupBackPressedHandler()&#10;        retrieveAndDisplayData()&#10;    }&#10;&#10;    private fun setupActionBar() {&#10;        binding.toolbar?.let { toolbar -&gt;&#10;            try {&#10;                // Check if we already have an action bar&#10;                if (supportActionBar == null) {&#10;                    setSupportActionBar(toolbar)&#10;                    supportActionBar?.apply {&#10;                        setDisplayHomeAsUpEnabled(true)&#10;                        setDisplayShowHomeEnabled(true)&#10;                        title = &quot;Hasil Pengukuran&quot;&#10;                    }&#10;                } else {&#10;                    // Use existing action bar&#10;                    supportActionBar?.apply {&#10;                        setDisplayHomeAsUpEnabled(true)&#10;                        setDisplayShowHomeEnabled(true)&#10;                        title = &quot;Hasil Pengukuran&quot;&#10;                    }&#10;                }&#10;            } catch (e: IllegalStateException) {&#10;                Log.e(&quot;ResultActivity&quot;, &quot;ActionBar already exists, using toolbar directly: ${e.message}&quot;)&#10;                // Fallback: use toolbar directly without setSupportActionBar&#10;                toolbar.title = &quot;Hasil Pengukuran&quot;&#10;                toolbar.setNavigationIcon(androidx.appcompat.R.drawable.abc_ic_ab_back_material)&#10;                toolbar.setNavigationOnClickListener {&#10;                    onBackPressedDispatcher.onBackPressed()&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;ResultActivity&quot;, &quot;ActionBar setup failed: ${e.message}&quot;)&#10;                // Final fallback: basic toolbar setup&#10;                binding.toolbar?.let { tb -&gt;&#10;                    tb.title = &quot;Hasil Pengukuran&quot;&#10;                    tb.setNavigationOnClickListener {&#10;                        onBackPressedDispatcher.onBackPressed()&#10;                    }&#10;                }&#10;            }&#10;        } ?: run {&#10;            // No toolbar in layout, use default action bar&#10;            supportActionBar?.apply {&#10;                setDisplayHomeAsUpEnabled(true)&#10;                setDisplayShowHomeEnabled(true)&#10;                title = &quot;Hasil Pengukuran&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupViewModel() {&#10;        val database = AppDatabase.getDatabase(this)&#10;        val repository = MeasurementRepository(database.measurementDao())&#10;        val viewModelFactory = MeasurementViewModelFactory(repository)&#10;        measurementViewModel = ViewModelProvider(this, viewModelFactory)[MeasurementViewModel::class.java]&#10;    }&#10;&#10;    private fun setupUI() {&#10;        setupButtons()&#10;    }&#10;&#10;    private fun setupButtons() {&#10;        // Reference buttons from the new layout&#10;        binding.btnSaveResult.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            if (!isSaved) {&#10;                saveMeasurement()&#10;            } else {&#10;                Toast.makeText(this, &quot;Hasil sudah tersimpan&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;&#10;        binding.btnNewMeasurement.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            startNewMeasurement()&#10;        }&#10;    }&#10;&#10;    private fun setupBackPressedHandler() {&#10;        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {&#10;            override fun handleOnBackPressed() {&#10;                if (!isSaved &amp;&amp; measurementResult != null) {&#10;                    showSaveConfirmationDialog()&#10;                } else {&#10;                    finish()&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun retrieveAndDisplayData() {&#10;        measurementResult = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            intent.getParcelableExtra(EXTRA_MEASUREMENT_RESULT, MeasurementResult::class.java)&#10;        } else {&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            intent.getParcelableExtra(EXTRA_MEASUREMENT_RESULT)&#10;        }&#10;&#10;        val packageName = intent.getStringExtra(EXTRA_PACKAGE_NAME)&#10;        val declaredSize = intent.getStringExtra(EXTRA_DECLARED_SIZE)&#10;        val measurementId = intent.getLongExtra(EXTRA_MEASUREMENT_ID, -1L)&#10;&#10;        measurementResult?.let { result -&gt;&#10;            displayMeasurementResult(result, packageName, declaredSize)&#10;        } ?: run {&#10;            if (measurementId != -1L) {&#10;                loadMeasurementFromDatabase(measurementId)&#10;            } else {&#10;                showError(&quot;Data pengukuran tidak ditemukan&quot;)&#10;                finish()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadMeasurementFromDatabase(measurementId: Long) {&#10;        lifecycleScope.launch {&#10;            try {&#10;                measurementViewModel.getMeasurementById(measurementId).collect { result -&gt;&#10;                    if (result != null) {&#10;                        measurementResult = result&#10;                        isSaved = true&#10;                        savedMeasurementId = measurementId&#10;                        displayMeasurementResult(result, result.packageName, result.declaredSize)&#10;                    } else {&#10;                        showError(&quot;Pengukuran tidak ditemukan&quot;)&#10;                        finish()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;ResultActivity&quot;, &quot;Error loading measurement&quot;, e)&#10;                showError(&quot;Error memuat pengukuran: ${e.message}&quot;)&#10;                finish()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun displayMeasurementData() {&#10;        measurementResult?.let { result -&gt;&#10;            val decimalFormat = DecimalFormat(&quot;#.##&quot;)&#10;&#10;            // Display measurement data using the new layout IDs&#10;            binding.tvWidth.text = &quot;${decimalFormat.format(result.width * 100)} cm&quot;&#10;            binding.tvHeight.text = &quot;${decimalFormat.format(result.height * 100)} cm&quot;&#10;            binding.tvDepth.text = &quot;${decimalFormat.format(result.depth * 100)} cm&quot;&#10;            binding.tvVolume.text = &quot;${decimalFormat.format(result.volume * 1000000)} cm³&quot;&#10;&#10;            // Display package information&#10;            binding.tvPackageName.text = &quot;Nama Paket: ${intent.getStringExtra(EXTRA_PACKAGE_NAME) ?: &quot;Default&quot;}&quot;&#10;            binding.tvDeclaredSize.text = &quot;Ukuran Deklarasi: ${intent.getStringExtra(EXTRA_DECLARED_SIZE) ?: &quot;Tidak ditentukan&quot;}&quot;&#10;&#10;            // Display timestamp&#10;            val dateFormat = SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;, Locale.getDefault())&#10;            binding.tvTimestamp.text = &quot;Waktu: ${dateFormat.format(Date())}&quot;&#10;&#10;            // Display price estimation if available&#10;            val estimatedPrice = intent.getIntExtra(&quot;ESTIMATED_PRICE&quot;, 0)&#10;            val sizeCategory = intent.getStringExtra(&quot;PACKAGE_SIZE_CATEGORY&quot;) ?: &quot;&quot;&#10;&#10;            if (estimatedPrice &gt; 0) {&#10;                binding.cvPriceEstimation.visibility = android.view.View.VISIBLE&#10;                binding.tvEstimatedPrice.text = &quot;Rp${String.format(&quot;%,d&quot;, estimatedPrice)}&quot;&#10;                binding.tvSizeCategory.text = &quot;Kategori: $sizeCategory&quot;&#10;            } else {&#10;                binding.cvPriceEstimation.visibility = android.view.View.GONE&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun displayMeasurementResult(result: MeasurementResult, packageName: String?, declaredSize: String?) {&#10;        val decimalFormat = DecimalFormat(&quot;#.##&quot;)&#10;        val dateFormat = SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;, Locale.getDefault())&#10;&#10;        // Convert measurements from meters to centimeters for display&#10;        val widthCm = result.width * 100&#10;        val heightCm = result.height * 100&#10;        val depthCm = result.depth * 100&#10;        val volumeCm3 = (result.volume * 1_000_000).toDouble() // m³ to cm³&#10;&#10;        // Use the correct View binding references&#10;        binding.tvWidth.text = &quot;${decimalFormat.format(widthCm)} cm&quot;&#10;        binding.tvHeight.text = &quot;${decimalFormat.format(heightCm)} cm&quot;&#10;        binding.tvDepth.text = &quot;${decimalFormat.format(depthCm)} cm&quot;&#10;        binding.tvVolume.text = &quot;${decimalFormat.format(volumeCm3)} cm³&quot;&#10;&#10;        // Display timestamp&#10;        binding.tvTimestamp.text = &quot;Waktu: ${dateFormat.format(Date(result.timestamp))}&quot;&#10;&#10;        // Display package information&#10;        binding.tvPackageName.text = &quot;Nama Paket: ${packageName ?: &quot;Tidak ada nama paket&quot;}&quot;&#10;        binding.tvDeclaredSize.text = &quot;Ukuran Deklarasi: ${declaredSize ?: &quot;Tidak ditentukan&quot;}&quot;&#10;&#10;        // Calculate and display size category and price&#10;        displaySizeCategoryAndPrice(volumeCm3)&#10;        updateSaveButtonState()&#10;    }&#10;&#10;    private fun displaySizeCategoryAndPrice(volumeCm3: Double) {&#10;        val (category, price) = when {&#10;            volumeCm3 &lt;= 1000 -&gt; &quot;Kecil&quot; to 10000&#10;            volumeCm3 &lt;= 5000 -&gt; &quot;Sedang&quot; to 20000&#10;            else -&gt; &quot;Besar&quot; to 30000&#10;        }&#10;&#10;        // Display price estimation&#10;        binding.cvPriceEstimation.visibility = android.view.View.VISIBLE&#10;        binding.tvEstimatedPrice.text = &quot;Rp${String.format(&quot;%,d&quot;, price)}&quot;&#10;        binding.tvSizeCategory.text = &quot;Kategori: $category&quot;&#10;    }&#10;&#10;    private fun updateSaveButtonState() {&#10;        if (isSaved) {&#10;            binding.btnSaveResult.apply {&#10;                text = &quot;Tersimpan&quot;&#10;                isEnabled = false&#10;                alpha = 0.6f&#10;            }&#10;            binding.cvSaveStatus.visibility = android.view.View.VISIBLE&#10;            binding.tvSaveStatus.text = &quot;Status: Tersimpan&quot;&#10;        } else {&#10;            binding.btnSaveResult.apply {&#10;                text = getString(R.string.btn_save)&#10;                isEnabled = true&#10;                alpha = 1.0f&#10;            }&#10;            binding.cvSaveStatus.visibility = android.view.View.GONE&#10;        }&#10;    }&#10;&#10;    private fun saveMeasurement() {&#10;        val result = measurementResult ?: return&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                val packageName = intent.getStringExtra(EXTRA_PACKAGE_NAME)&#10;                val declaredSize = intent.getStringExtra(EXTRA_DECLARED_SIZE)&#10;&#10;                // Buat MeasurementResult baru dengan data tambahan&#10;                val resultToSave = MeasurementResult(&#10;                    id = result.id,&#10;                    width = result.width,&#10;                    height = result.height,&#10;                    depth = result.depth,&#10;                    volume = result.volume,&#10;                    timestamp = result.timestamp,&#10;                    packageName = packageName,&#10;                    declaredSize = declaredSize&#10;                )&#10;&#10;                val id = measurementViewModel.saveMeasurement(resultToSave)&#10;                savedMeasurementId = id&#10;                isSaved = true&#10;                updateSaveButtonState()&#10;&#10;                Toast.makeText(this@ResultActivity, &quot;Hasil pengukuran berhasil disimpan&quot;, Toast.LENGTH_SHORT).show()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;ResultActivity&quot;, &quot;Error saving measurement&quot;, e)&#10;                Toast.makeText(this@ResultActivity, &quot;Gagal menyimpan: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startNewMeasurement() {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun navigateToHistory() {&#10;        val intent = Intent(this, HistoryActivity::class.java)&#10;        startActivity(intent)&#10;    }&#10;&#10;    private fun showSaveConfirmationDialog() {&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Simpan Hasil?&quot;)&#10;            .setMessage(&quot;Apakah Anda ingin menyimpan hasil pengukuran sebelum keluar?&quot;)&#10;            .setPositiveButton(&quot;Simpan&quot;) { _, _ -&gt;&#10;                saveMeasurement()&#10;                finish()&#10;            }&#10;            .setNegativeButton(&quot;Keluar Tanpa Menyimpan&quot;) { _, _ -&gt;&#10;                finish()&#10;            }&#10;            .setNeutralButton(&quot;Batal&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showError(message: String) {&#10;        Toast.makeText(this, message, Toast.LENGTH_LONG).show()&#10;        Log.e(&quot;ResultActivity&quot;, message)&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu?): Boolean {&#10;        menuInflater.inflate(R.menu.result_menu, menu)&#10;        return true&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            android.R.id.home -&gt; {&#10;                onBackPressedDispatcher.onBackPressed()&#10;                true&#10;            }&#10;            R.id.action_share -&gt; {&#10;                shareMeasurementResult()&#10;                true&#10;            }&#10;            R.id.action_delete -&gt; {&#10;                deleteMeasurement()&#10;                true&#10;            }&#10;            R.id.action_history -&gt; {&#10;                navigateToHistory()&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    private fun shareMeasurementResult() {&#10;        val measurementData = measurementResult ?: return&#10;        val decimalFormat = DecimalFormat(&quot;#.##&quot;)&#10;&#10;        val widthCm = measurementData.width * 100&#10;        val heightCm = measurementData.height * 100&#10;        val depthCm = measurementData.depth * 100&#10;        val volumeCm3 = measurementData.volume * 1_000_000&#10;&#10;        val shareText = &quot;&quot;&quot;&#10;            Hasil Pengukuran AR&#10;            &#10;            Dimensi:&#10;            Lebar: ${decimalFormat.format(widthCm)} cm&#10;            Tinggi: ${decimalFormat.format(heightCm)} cm&#10;            Panjang: ${decimalFormat.format(depthCm)} cm&#10;            Volume: ${decimalFormat.format(volumeCm3)} cm³&#10;            &#10;            Diukur dengan Paxel AR Validator&#10;        &quot;&quot;&quot;.trimIndent()&#10;&#10;        val shareIntent = Intent().apply {&#10;            action = Intent.ACTION_SEND&#10;            putExtra(Intent.EXTRA_TEXT, shareText)&#10;            type = &quot;text/plain&quot;&#10;        }&#10;        startActivity(Intent.createChooser(shareIntent, &quot;Bagikan Hasil Pengukuran&quot;))&#10;    }&#10;&#10;    private fun deleteMeasurement() {&#10;        val id = savedMeasurementId ?: return&#10;&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Hapus Pengukuran&quot;)&#10;            .setMessage(&quot;Apakah Anda yakin ingin menghapus hasil pengukuran ini?&quot;)&#10;            .setPositiveButton(&quot;Hapus&quot;) { _, _ -&gt;&#10;                lifecycleScope.launch {&#10;                    try {&#10;                        measurementViewModel.deleteMeasurementById(id)&#10;                        Toast.makeText(this@ResultActivity, &quot;Pengukuran berhasil dihapus&quot;, Toast.LENGTH_SHORT).show()&#10;                        finish()&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;ResultActivity&quot;, &quot;Error deleting measurement&quot;, e)&#10;                        Toast.makeText(this@ResultActivity, &quot;Gagal menghapus: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            }&#10;            .setNegativeButton(&quot;Batal&quot;, null)&#10;            .show()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorPrimary&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_save.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_save.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnPrimary&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M17,3L5,3c-1.11,0 -2,0.9 -2,2v14c0,1.1 0.89,2 2,2h14c1.11,0 2,-0.9 2,-2L21,7l-4,-4zM12,19c-1.66,0 -3,-1.34 -3,-3s1.34,-3 3,-3 3,1.34 3,3 -1.34,3 -3,3zM15,9L5,9L5,5h10v4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_result.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_result.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background_color&quot;&#10;    tools:context=&quot;.ui.result.ResultActivity&quot;&gt;&#10;&#10;    &lt;!-- Toolbar --&gt;&#10;    &lt;androidx.appcompat.widget.Toolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        android:background=&quot;@color/primary&quot;&#10;        android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;&#10;        app:title=&quot;Hasil Pengukuran&quot;&#10;        app:titleTextColor=&quot;@color/white&quot; /&gt;&#10;&#10;    &lt;!-- Scrollable Content --&gt;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/bottomButtonContainer&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/toolbar&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Package Information Card --&gt;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Informasi Paket&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvPackageName&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;8dp&quot;&#10;                        android:text=&quot;Nama Paket: Loading...&quot;&#10;                        android:textColor=&quot;@color/text_secondary&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvDeclaredSize&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;Ukuran Deklarasi: Loading...&quot;&#10;                        android:textColor=&quot;@color/text_secondary&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvTimestamp&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;Waktu: Loading...&quot;&#10;                        android:textColor=&quot;@color/text_secondary&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- Measurement Results Card --&gt;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Hasil Pengukuran&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;!-- Dimensions Grid --&gt;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;16dp&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;!-- Width --&gt;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_marginBottom=&quot;8dp&quot;&#10;                            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;0dp&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:layout_weight=&quot;1&quot;&#10;                                android:text=&quot;Lebar:&quot;&#10;                                android:textColor=&quot;@color/text_secondary&quot;&#10;                                android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/tvWidth&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0.0 cm&quot;&#10;                                android:textColor=&quot;@color/text_primary&quot;&#10;                                android:textSize=&quot;14sp&quot;&#10;                                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;!-- Height --&gt;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_marginBottom=&quot;8dp&quot;&#10;                            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;0dp&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:layout_weight=&quot;1&quot;&#10;                                android:text=&quot;Tinggi:&quot;&#10;                                android:textColor=&quot;@color/text_secondary&quot;&#10;                                android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/tvHeight&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0.0 cm&quot;&#10;                                android:textColor=&quot;@color/text_primary&quot;&#10;                                android:textSize=&quot;14sp&quot;&#10;                                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;!-- Depth --&gt;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_marginBottom=&quot;8dp&quot;&#10;                            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;0dp&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:layout_weight=&quot;1&quot;&#10;                                android:text=&quot;Panjang:&quot;&#10;                                android:textColor=&quot;@color/text_secondary&quot;&#10;                                android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/tvDepth&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0.0 cm&quot;&#10;                                android:textColor=&quot;@color/text_primary&quot;&#10;                                android:textSize=&quot;14sp&quot;&#10;                                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;!-- Volume --&gt;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;0dp&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:layout_weight=&quot;1&quot;&#10;                                android:text=&quot;Volume:&quot;&#10;                                android:textColor=&quot;@color/text_secondary&quot;&#10;                                android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/tvVolume&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0.0 cm³&quot;&#10;                                android:textColor=&quot;@color/text_primary&quot;&#10;                                android:textSize=&quot;14sp&quot;&#10;                                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- Price Estimation Card --&gt;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cvPriceEstimation&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&#10;                app:cardBackgroundColor=&quot;@color/primary_light&quot;&#10;                tools:visibility=&quot;visible&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Estimasi Harga&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvEstimatedPrice&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;8dp&quot;&#10;                        android:text=&quot;Rp 20.000 (Sedang)&quot;&#10;                        android:textColor=&quot;@color/primary&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvSizeCategory&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;Kategori: Sedang&quot;&#10;                        android:textColor=&quot;@color/text_secondary&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- Save Status Card --&gt;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cvSaveStatus&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&#10;                tools:visibility=&quot;visible&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvSaveStatus&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Status: Tersimpan&quot;&#10;                        android:textColor=&quot;@color/success&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/ScrollView&gt;&#10;&#10;    &lt;!-- Bottom Button Container --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/bottomButtonContainer&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@color/white&quot;&#10;        android:elevation=&quot;8dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btnSaveResult&quot;&#10;            style=&quot;@style/Widget.MaterialComponents.Button&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;@string/btn_save&quot;&#10;            app:backgroundTint=&quot;@color/primary&quot;&#10;            app:icon=&quot;@drawable/ic_save&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btnNewMeasurement&quot;&#10;            style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;@string/btn_new_measurement&quot;&#10;            app:icon=&quot;@drawable/ic_add&quot;&#10;            app:strokeColor=&quot;@color/primary&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Primary colors --&gt;&#10;    &lt;color name=&quot;primary&quot;&gt;#2196F3&lt;/color&gt;&#10;    &lt;color name=&quot;primary_dark&quot;&gt;#1976D2&lt;/color&gt;&#10;    &lt;color name=&quot;primary_light&quot;&gt;#BBDEFB&lt;/color&gt;&#10;    &lt;color name=&quot;secondary&quot;&gt;#FF4081&lt;/color&gt;&#10;    &lt;color name=&quot;secondary_dark&quot;&gt;#C2185B&lt;/color&gt;&#10;&#10;    &lt;!-- Background colors --&gt;&#10;    &lt;color name=&quot;background_color&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;surface_color&quot;&gt;#F5F5F5&lt;/color&gt;&#10;    &lt;color name=&quot;background_light&quot;&gt;#FAFAFA&lt;/color&gt;&#10;&#10;    &lt;!-- Basic colors --&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;gray&quot;&gt;#9E9E9E&lt;/color&gt;&#10;    &lt;color name=&quot;gray_light&quot;&gt;#F5F5F5&lt;/color&gt;&#10;    &lt;color name=&quot;gray_dark&quot;&gt;#424242&lt;/color&gt;&#10;    &lt;color name=&quot;gray_500&quot;&gt;#9E9E9E&lt;/color&gt;&#10;    &lt;color name=&quot;gray_600&quot;&gt;#757575&lt;/color&gt;&#10;&#10;    &lt;!-- Status colors for object detection --&gt;&#10;    &lt;color name=&quot;success&quot;&gt;#4CAF50&lt;/color&gt;&#10;    &lt;color name=&quot;success_dark&quot;&gt;#388E3C&lt;/color&gt;&#10;    &lt;color name=&quot;error&quot;&gt;#F44336&lt;/color&gt;&#10;    &lt;color name=&quot;error_dark&quot;&gt;#D32F2F&lt;/color&gt;&#10;    &lt;color name=&quot;warning&quot;&gt;#FF9800&lt;/color&gt;&#10;    &lt;color name=&quot;warning_light&quot;&gt;#FFE0B2&lt;/color&gt;&#10;    &lt;color name=&quot;warning_dark&quot;&gt;#F57C00&lt;/color&gt;&#10;    &lt;color name=&quot;info&quot;&gt;#2196F3&lt;/color&gt;&#10;&#10;    &lt;!-- Text colors --&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;#212121&lt;/color&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;#757575&lt;/color&gt;&#10;    &lt;color name=&quot;text_tertiary&quot;&gt;#BDBDBD&lt;/color&gt;&#10;    &lt;color name=&quot;text_hint&quot;&gt;#BDBDBD&lt;/color&gt;&#10;&#10;    &lt;!-- AR measurement colors --&gt;&#10;    &lt;color name=&quot;ar_point_color&quot;&gt;#F44336&lt;/color&gt;&#10;    &lt;color name=&quot;ar_line_color&quot;&gt;#FFEB3B&lt;/color&gt;&#10;&#10;    &lt;!-- Border colors --&gt;&#10;    &lt;color name=&quot;border_primary&quot;&gt;#E0E0E0&lt;/color&gt;&#10;&#10;    &lt;!-- Card colors --&gt;&#10;    &lt;color name=&quot;card_background&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;card_elevation&quot;&gt;#E0E0E0&lt;/color&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Primary colors --&gt;&#10;    &lt;color name=&quot;primary&quot;&gt;#2196F3&lt;/color&gt;&#10;    &lt;color name=&quot;primary_dark&quot;&gt;#1976D2&lt;/color&gt;&#10;    &lt;color name=&quot;primary_light&quot;&gt;#BBDEFB&lt;/color&gt;&#10;    &lt;color name=&quot;secondary&quot;&gt;#FF4081&lt;/color&gt;&#10;    &lt;color name=&quot;secondary_dark&quot;&gt;#C2185B&lt;/color&gt;&#10;&#10;    &lt;!-- Paxel brand colors (for compatibility) --&gt;&#10;    &lt;color name=&quot;paxel_primary&quot;&gt;#2196F3&lt;/color&gt;&#10;    &lt;color name=&quot;paxel_primary_dark&quot;&gt;#1976D2&lt;/color&gt;&#10;    &lt;color name=&quot;paxel_primary_light&quot;&gt;#BBDEFB&lt;/color&gt;&#10;    &lt;color name=&quot;paxel_accent&quot;&gt;#FF4081&lt;/color&gt;&#10;    &lt;color name=&quot;paxel_red&quot;&gt;#F44336&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;background_primary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;background_secondary&quot;&gt;#F5F5F5&lt;/color&gt;&#10;    &lt;color name=&quot;surface_primary&quot;&gt;#F5F5F5&lt;/color&gt;&#10;    &lt;!-- Background colors --&gt;&#10;    &lt;color name=&quot;background_color&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;surface_color&quot;&gt;#F5F5F5&lt;/color&gt;&#10;    &lt;color name=&quot;background_light&quot;&gt;#FAFAFA&lt;/color&gt;&#10;&#10;    &lt;!-- Basic colors --&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;gray&quot;&gt;#9E9E9E&lt;/color&gt;&#10;    &lt;color name=&quot;gray_light&quot;&gt;#F5F5F5&lt;/color&gt;&#10;    &lt;color name=&quot;gray_dark&quot;&gt;#424242&lt;/color&gt;&#10;    &lt;color name=&quot;gray_500&quot;&gt;#9E9E9E&lt;/color&gt;&#10;    &lt;color name=&quot;gray_600&quot;&gt;#757575&lt;/color&gt;&#10;&#10;    &lt;!-- Status colors --&gt;&#10;    &lt;color name=&quot;success&quot;&gt;#4CAF50&lt;/color&gt;&#10;    &lt;color name=&quot;success_dark&quot;&gt;#388E3C&lt;/color&gt;&#10;    &lt;color name=&quot;error&quot;&gt;#F44336&lt;/color&gt;&#10;    &lt;color name=&quot;error_dark&quot;&gt;#D32F2F&lt;/color&gt;&#10;    &lt;color name=&quot;warning&quot;&gt;#FF9800&lt;/color&gt;&#10;    &lt;color name=&quot;warning_light&quot;&gt;#FFE0B2&lt;/color&gt;&#10;    &lt;color name=&quot;warning_dark&quot;&gt;#F57C00&lt;/color&gt;&#10;    &lt;color name=&quot;info&quot;&gt;#2196F3&lt;/color&gt;&#10;&#10;    &lt;!-- Text colors --&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;#212121&lt;/color&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;#757575&lt;/color&gt;&#10;    &lt;color name=&quot;text_tertiary&quot;&gt;#BDBDBD&lt;/color&gt;&#10;    &lt;color name=&quot;text_hint&quot;&gt;#BDBDBD&lt;/color&gt;&#10;&#10;    &lt;!-- AR measurement colors --&gt;&#10;    &lt;color name=&quot;ar_point_color&quot;&gt;#F44336&lt;/color&gt;&#10;    &lt;color name=&quot;ar_line_color&quot;&gt;#FFEB3B&lt;/color&gt;&#10;&#10;    &lt;!-- Border colors --&gt;&#10;    &lt;color name=&quot;border_primary&quot;&gt;#E0E0E0&lt;/color&gt;&#10;&#10;    &lt;!-- Card colors --&gt;&#10;    &lt;color name=&quot;card_background&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;card_elevation&quot;&gt;#E0E0E0&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- App name --&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Paxel AR Validator&lt;/string&gt;&#10;&#10;    &lt;!-- Main Activity --&gt;&#10;    &lt;string name=&quot;main_title&quot;&gt;Paxel AR Validator&lt;/string&gt;&#10;    &lt;string name=&quot;subtitle&quot;&gt;Ukur paket dengan teknologi AR&lt;/string&gt;&#10;    &lt;string name=&quot;start_measurement&quot;&gt;Mulai Pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;view_history&quot;&gt;Lihat Riwayat&lt;/string&gt;&#10;    &lt;string name=&quot;version_info&quot;&gt;Versi 1.0.0&lt;/string&gt;&#10;&#10;    &lt;!-- Measurement Instructions --&gt;&#10;    &lt;string name=&quot;instruction_step_1&quot;&gt;Arahkan kamera ke paket dan ketuk untuk memulai pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_step_2&quot;&gt;Ketuk titik kedua untuk membuat garis dasar&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_step_3&quot;&gt;Ketuk bagian atas paket untuk mengukur tinggi&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_completed&quot;&gt;Pengukuran selesai! Lihat hasil di bawah&lt;/string&gt;&#10;&#10;    &lt;!-- UI Labels --&gt;&#10;    &lt;string name=&quot;tracking_help&quot;&gt;Gerakkan perangkat untuk mendeteksi permukaan&lt;/string&gt;&#10;    &lt;string name=&quot;detecting_surface&quot;&gt;Mendeteksi permukaan...&lt;/string&gt;&#10;    &lt;string name=&quot;object_detection_message&quot;&gt;Arahkan kamera ke paket untuk memulai pengukuran&lt;/string&gt;&#10;&#10;    &lt;!-- Buttons --&gt;&#10;    &lt;string name=&quot;undo&quot;&gt;Batalkan&lt;/string&gt;&#10;    &lt;string name=&quot;reset&quot;&gt;Reset&lt;/string&gt;&#10;    &lt;string name=&quot;ambil_bukti_foto&quot;&gt;Ambil Foto&lt;/string&gt;&#10;    &lt;string name=&quot;btn_undo&quot;&gt;Batalkan&lt;/string&gt;&#10;    &lt;string name=&quot;btn_reset&quot;&gt;Reset&lt;/string&gt;&#10;    &lt;string name=&quot;btn_take_photo&quot;&gt;Ambil Foto&lt;/string&gt;&#10;    &lt;string name=&quot;btn_continue_to_result&quot;&gt;Lanjutkan ke Hasil&lt;/string&gt;&#10;    &lt;string name=&quot;btn_save&quot;&gt;Simpan Hasil&lt;/string&gt;&#10;    &lt;string name=&quot;btn_new_measurement&quot;&gt;Pengukuran Baru&lt;/string&gt;&#10;    &lt;string name=&quot;btn_view_history&quot;&gt;Lihat Riwayat&lt;/string&gt;&#10;&#10;    &lt;!-- Package Input Dialog --&gt;&#10;    &lt;string name=&quot;select_declared_size_prompt&quot;&gt;Pilih ukuran yang dinyatakan&lt;/string&gt;&#10;&#10;    &lt;!-- History --&gt;&#10;    &lt;string name=&quot;no_measurements&quot;&gt;Belum ada pengukuran tersimpan&lt;/string&gt;&#10;    &lt;string name=&quot;search_hint&quot;&gt;Cari pengukuran...&lt;/string&gt;&#10;    &lt;string name=&quot;export_csv&quot;&gt;Ekspor CSV&lt;/string&gt;&#10;    &lt;string name=&quot;delete_all&quot;&gt;Hapus Semua&lt;/string&gt;&#10;&#10;    &lt;!-- Measurements --&gt;&#10;    &lt;string name=&quot;width&quot;&gt;Lebar&lt;/string&gt;&#10;    &lt;string name=&quot;height&quot;&gt;Tinggi&lt;/string&gt;&#10;    &lt;string name=&quot;depth&quot;&gt;Panjang&lt;/string&gt;&#10;    &lt;string name=&quot;volume&quot;&gt;Volume&lt;/string&gt;&#10;    &lt;string name=&quot;timestamp&quot;&gt;Waktu&lt;/string&gt;&#10;    &lt;string name=&quot;package_name&quot;&gt;Nama Paket&lt;/string&gt;&#10;    &lt;string name=&quot;declared_size&quot;&gt;Ukuran yang Dinyatakan&lt;/string&gt;&#10;    &lt;string name=&quot;size_category&quot;&gt;Kategori Ukuran&lt;/string&gt;&#10;    &lt;string name=&quot;estimated_price&quot;&gt;Estimasi Harga&lt;/string&gt;&#10;&#10;    &lt;!-- Menu items --&gt;&#10;    &lt;string name=&quot;action_share&quot;&gt;Bagikan&lt;/string&gt;&#10;    &lt;string name=&quot;action_delete&quot;&gt;Hapus&lt;/string&gt;&#10;&#10;    &lt;!-- Messages --&gt;&#10;    &lt;string name=&quot;measurement_saved&quot;&gt;Hasil pengukuran berhasil disimpan&lt;/string&gt;&#10;    &lt;string name=&quot;measurement_deleted&quot;&gt;Pengukuran berhasil dihapus&lt;/string&gt;&#10;    &lt;string name=&quot;error_save_failed&quot;&gt;Gagal menyimpan hasil pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;error_delete_failed&quot;&gt;Gagal menghapus pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;arcore_not_supported&quot;&gt;ARCore tidak didukung di perangkat ini&lt;/string&gt;&#10;&#10;    &lt;!-- Additional missing strings for full app functionality --&gt;&#10;    &lt;string name=&quot;default_package_name&quot;&gt;Paket Default&lt;/string&gt;&#10;    &lt;string name=&quot;package_name_title&quot;&gt;Nama Paket&lt;/string&gt;&#10;    &lt;string name=&quot;ok&quot;&gt;OK&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Batal&lt;/string&gt;&#10;    &lt;string name=&quot;dismiss&quot;&gt;Tutup&lt;/string&gt;&#10;&#10;    &lt;!-- Menu and action strings --&gt;&#10;    &lt;string name=&quot;result_menu&quot;&gt;Menu Hasil&lt;/string&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- App name --&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Paxel AR Validator&lt;/string&gt;&#10;&#10;    &lt;!-- Main Activity --&gt;&#10;    &lt;string name=&quot;main_title&quot;&gt;Paxel AR Validator&lt;/string&gt;&#10;    &lt;string name=&quot;subtitle&quot;&gt;Ukur paket dengan teknologi AR&lt;/string&gt;&#10;    &lt;string name=&quot;start_measurement&quot;&gt;Mulai Pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;view_history&quot;&gt;Lihat Riwayat&lt;/string&gt;&#10;    &lt;string name=&quot;version_info&quot;&gt;Versi 1.0.0&lt;/string&gt;&#10;&#10;    &lt;!-- Measurement Instructions --&gt;&#10;    &lt;string name=&quot;instruction_step_1&quot;&gt;Arahkan kamera ke paket dan ketuk untuk memulai pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_step_2&quot;&gt;Ketuk titik kedua untuk membuat garis dasar&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_step_3&quot;&gt;Ketuk bagian atas paket untuk mengukur tinggi&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_completed&quot;&gt;Pengukuran selesai! Lihat hasil di bawah&lt;/string&gt;&#10;&#10;    &lt;!-- UI Labels --&gt;&#10;    &lt;string name=&quot;tracking_help&quot;&gt;Gerakkan perangkat untuk mendeteksi permukaan&lt;/string&gt;&#10;    &lt;string name=&quot;detecting_surface&quot;&gt;Mendeteksi permukaan...&lt;/string&gt;&#10;&#10;    &lt;!-- Buttons --&gt;&#10;    &lt;string name=&quot;undo&quot;&gt;Batalkan&lt;/string&gt;&#10;    &lt;string name=&quot;reset&quot;&gt;Reset&lt;/string&gt;&#10;    &lt;string name=&quot;ambil_bukti_foto&quot;&gt;Ambil Foto&lt;/string&gt;&#10;    &lt;string name=&quot;btn_undo&quot;&gt;Batalkan&lt;/string&gt;&#10;    &lt;string name=&quot;btn_reset&quot;&gt;Reset&lt;/string&gt;&#10;    &lt;string name=&quot;btn_take_photo&quot;&gt;Ambil Foto&lt;/string&gt;&#10;    &lt;string name=&quot;btn_continue_to_result&quot;&gt;Lanjutkan ke Hasil&lt;/string&gt;&#10;    &lt;string name=&quot;btn_save&quot;&gt;Simpan Hasil&lt;/string&gt;&#10;    &lt;string name=&quot;btn_new_measurement&quot;&gt;Pengukuran Baru&lt;/string&gt;&#10;    &lt;string name=&quot;btn_view_history&quot;&gt;Lihat Riwayat&lt;/string&gt;&#10;&#10;    &lt;!-- Package Input Dialog --&gt;&#10;    &lt;string name=&quot;select_declared_size_prompt&quot;&gt;Pilih ukuran yang dinyatakan&lt;/string&gt;&#10;&#10;    &lt;!-- History --&gt;&#10;    &lt;string name=&quot;no_measurements&quot;&gt;Belum ada pengukuran tersimpan&lt;/string&gt;&#10;    &lt;string name=&quot;search_hint&quot;&gt;Cari pengukuran...&lt;/string&gt;&#10;    &lt;string name=&quot;export_csv&quot;&gt;Ekspor CSV&lt;/string&gt;&#10;    &lt;string name=&quot;delete_all&quot;&gt;Hapus Semua&lt;/string&gt;&#10;&#10;    &lt;!-- Measurements --&gt;&#10;    &lt;string name=&quot;width&quot;&gt;Lebar&lt;/string&gt;&#10;    &lt;string name=&quot;height&quot;&gt;Tinggi&lt;/string&gt;&#10;    &lt;string name=&quot;depth&quot;&gt;Panjang&lt;/string&gt;&#10;    &lt;string name=&quot;volume&quot;&gt;Volume&lt;/string&gt;&#10;    &lt;string name=&quot;timestamp&quot;&gt;Waktu&lt;/string&gt;&#10;    &lt;string name=&quot;package_name&quot;&gt;Nama Paket&lt;/string&gt;&#10;    &lt;string name=&quot;declared_size&quot;&gt;Ukuran yang Dinyatakan&lt;/string&gt;&#10;    &lt;string name=&quot;size_category&quot;&gt;Kategori Ukuran&lt;/string&gt;&#10;    &lt;string name=&quot;estimated_price&quot;&gt;Estimasi Harga&lt;/string&gt;&#10;&#10;    &lt;!-- Menu items --&gt;&#10;    &lt;string name=&quot;action_share&quot;&gt;Bagikan&lt;/string&gt;&#10;    &lt;string name=&quot;action_delete&quot;&gt;Hapus&lt;/string&gt;&#10;&#10;    &lt;!-- Messages --&gt;&#10;    &lt;string name=&quot;measurement_saved&quot;&gt;Hasil pengukuran berhasil disimpan&lt;/string&gt;&#10;    &lt;string name=&quot;measurement_deleted&quot;&gt;Pengukuran berhasil dihapus&lt;/string&gt;&#10;    &lt;string name=&quot;error_save_failed&quot;&gt;Gagal menyimpan hasil pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;error_delete_failed&quot;&gt;Gagal menghapus pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;arcore_not_supported&quot;&gt;ARCore tidak didukung di perangkat ini&lt;/string&gt;&#10;&#10;    &lt;!-- Additional missing strings for full app functionality --&gt;&#10;    &lt;string name=&quot;default_package_name&quot;&gt;Paket Default&lt;/string&gt;&#10;    &lt;string name=&quot;package_name_title&quot;&gt;Nama Paket&lt;/string&gt;&#10;    &lt;string name=&quot;ok&quot;&gt;OK&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Batal&lt;/string&gt;&#10;    &lt;string name=&quot;dismiss&quot;&gt;Tutup&lt;/string&gt;&#10;&#10;    &lt;!-- Menu and action strings --&gt;&#10;    &lt;string name=&quot;result_menu&quot;&gt;Menu Hasil&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Theme.PaxelARSpaceScan&quot; parent=&quot;Theme.Material3.DayNight&quot;&gt;&#10;        &lt;!-- Customize your theme here. --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryVariant&quot;&gt;@color/primary_dark&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondaryVariant&quot;&gt;@color/secondary_dark&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/primary_dark&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Theme for activities without ActionBar --&gt;&#10;    &lt;style name=&quot;Theme.PaxelARSpaceScan.NoActionBar&quot;&gt;&#10;        &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowFullscreen&quot;&gt;false&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Theme for ResultActivity with custom toolbar --&gt;&#10;    &lt;style name=&quot;Theme.PaxelARSpaceScan.NoActionBar.Result&quot;&gt;&#10;        &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot; tools:targetApi=&quot;27&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightNavigationBar&quot; tools:targetApi=&quot;27&quot;&gt;true&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Splash screen theme --&gt;&#10;    &lt;style name=&quot;Theme.PaxelARSpaceScan.Splash&quot;&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowFullscreen&quot;&gt;true&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Theme.PaxelARSpaceScan&quot; parent=&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;&gt;&#10;        &lt;!-- Customize your theme here. --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryVariant&quot;&gt;@color/primary_dark&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondaryVariant&quot;&gt;@color/secondary_dark&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/primary_dark&lt;/item&gt;&#10;        &lt;!-- Ensure MaterialButton attributes are available --&gt;&#10;        &lt;item name=&quot;materialButtonStyle&quot;&gt;@style/Widget.MaterialComponents.Button&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Theme for activities without ActionBar --&gt;&#10;    &lt;style name=&quot;Theme.PaxelARSpaceScan.NoActionBar&quot;&gt;&#10;        &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowFullscreen&quot;&gt;false&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Theme for ResultActivity with custom toolbar --&gt;&#10;    &lt;style name=&quot;Theme.PaxelARSpaceScan.NoActionBar.Result&quot;&gt;&#10;        &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot; tools:targetApi=&quot;27&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightNavigationBar&quot; tools:targetApi=&quot;27&quot;&gt;true&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Splash screen theme --&gt;&#10;    &lt;style name=&quot;Theme.PaxelARSpaceScan.Splash&quot;&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowFullscreen&quot;&gt;true&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>