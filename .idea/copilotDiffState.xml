<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; android:maxSdkVersion=&quot;28&quot; /&gt;&#10;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;true&quot; /&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera.ar&quot; android:required=&quot;true&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.PaxelARSpaceScan&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ui.main.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity android:name=&quot;.ui.measurement.ARMeasurementActivity&quot;&#10;            android:theme=&quot;@style/Theme.PaxelARSpaceScan.NoActionBar&quot; /&gt;&#10;&#10;        &lt;activity android:name=&quot;.ui.result.ResultActivity&quot;&#10;            android:theme=&quot;@style/Theme.PaxelARSpaceScan.NoActionBar&quot; /&gt;&#10;&#10;        &lt;activity android:name=&quot;.ui.history.HistoryActivity&quot; /&gt;&#10;&#10;        &lt;meta-data&#10;            android:name=&quot;com.google.ar.core&quot;&#10;            android:value=&quot;required&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; android:maxSdkVersion=&quot;28&quot; /&gt;&#10;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;true&quot; /&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera.ar&quot; android:required=&quot;true&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.PaxelARSpaceScan&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ui.main.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity android:name=&quot;.ui.measurement.ARMeasurementActivity&quot;&#10;            android:theme=&quot;@style/Theme.PaxelARSpaceScan.NoActionBar&quot; /&gt;&#10;&#10;        &lt;activity android:name=&quot;.ui.result.ResultActivity&quot;&#10;            android:theme=&quot;@style/Theme.PaxelARSpaceScan.NoActionBar.Result&quot; /&gt;&#10;&#10;        &lt;activity android:name=&quot;.ui.history.HistoryActivity&quot; /&gt;&#10;&#10;        &lt;meta-data&#10;            android:name=&quot;com.google.ar.core&quot;&#10;            android:value=&quot;required&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/data/local/AppDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/data/local/AppDatabase.kt" />
              <option name="originalContent" value="package com.paxel.arspacescan.data.local&#10;&#10;import android.content.Context&#10;import androidx.room.*&#10;import com.paxel.arspacescan.data.model.PackageMeasurement&#10;&#10;@Database(&#10;    entities = [PackageMeasurement::class],&#10;    version = 1,&#10;    exportSchema = true&#10;)&#10;@TypeConverters(Converters::class)&#10;abstract class AppDatabase : RoomDatabase() {&#10;&#10;    abstract fun measurementDao(): MeasurementDao&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: AppDatabase? = null&#10;&#10;        fun getDatabase(context: Context): AppDatabase {&#10;            return INSTANCE ?: synchronized(this) {&#10;                val instance = Room.databaseBuilder(&#10;                    context.applicationContext,&#10;                    AppDatabase::class.java,&#10;                    &quot;paxel_measurement_database&quot;&#10;                )&#10;                    .fallbackToDestructiveMigration()&#10;                    .build()&#10;                INSTANCE = instance&#10;                instance&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.paxel.arspacescan.data.local&#10;&#10;import android.content.Context&#10;import androidx.room.*&#10;import com.paxel.arspacescan.data.model.PackageMeasurement&#10;&#10;@Database(&#10;    entities = [PackageMeasurement::class],&#10;    version = 1,&#10;    exportSchema = true&#10;)&#10;@TypeConverters(Converters::class)&#10;abstract class AppDatabase : RoomDatabase() {&#10;&#10;    abstract fun measurementDao(): MeasurementDao&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: AppDatabase? = null&#10;&#10;        fun getDatabase(context: Context): AppDatabase {&#10;            return INSTANCE ?: synchronized(this) {&#10;                val instance = Room.databaseBuilder(&#10;                    context.applicationContext,&#10;                    AppDatabase::class.java,&#10;                    &quot;paxel_measurement_database&quot;&#10;                )&#10;                    .fallbackToDestructiveMigration(dropAllTables = true)&#10;                    .build()&#10;                INSTANCE = instance&#10;                instance&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/main/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/main/MainActivity.kt" />
              <option name="originalContent" value="package com.paxel.arspacescan.ui.main&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.HapticFeedbackConstants&#10;import android.view.View&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import com.google.android.material.card.MaterialCardView&#10;import com.google.ar.core.ArCoreApk&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.ui.history.HistoryActivity&#10;import com.paxel.arspacescan.ui.measurement.ARMeasurementActivity&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private val CAMERA_PERMISSION_CODE = 100&#10;    private var isSplashScreen = true&#10;&#10;    // Extension function untuk haptic feedback yang aman&#10;    private fun View.safeHapticFeedback() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O_MR1) {&#10;            performHapticFeedback(HapticFeedbackConstants.KEYBOARD_PRESS)&#10;        } else {&#10;            performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY)&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Tampilkan splash screen&#10;        setContentView(R.layout.activity_splash)&#10;&#10;        Handler(Looper.getMainLooper()).postDelayed({&#10;            isSplashScreen = false&#10;            setContentView(R.layout.activity_main)&#10;            setupMainMenu()&#10;        }, 2000)&#10;    }&#10;&#10;    private fun setupMainMenu() {&#10;        val startMeasurementCard = findViewById&lt;MaterialCardView&gt;(R.id.btnStartMeasurement)&#10;        val historyCard = findViewById&lt;MaterialCardView&gt;(R.id.btnHistory)&#10;&#10;        startMeasurementCard.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            checkPermissionsAndStartMeasurement()&#10;        }&#10;&#10;        historyCard.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            startActivity(Intent(this, HistoryActivity::class.java))&#10;        }&#10;    }&#10;&#10;    private fun checkPermissionsAndStartMeasurement() {&#10;        // Cek ketersediaan ARCore&#10;        val availability = ArCoreApk.getInstance().checkAvailability(this)&#10;        if (availability.isTransient) {&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                checkPermissionsAndStartMeasurement()&#10;            }, 200)&#10;            return&#10;        }&#10;&#10;        if (availability.isSupported) {&#10;            if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)&#10;                != PackageManager.PERMISSION_GRANTED&#10;            ) {&#10;                ActivityCompat.requestPermissions(&#10;                    this,&#10;                    arrayOf(Manifest.permission.CAMERA),&#10;                    CAMERA_PERMISSION_CODE&#10;                )&#10;            } else {&#10;                showPackageInputDialog()&#10;            }&#10;        } else {&#10;            Toast.makeText(&#10;                this,&#10;                &quot;Perangkat ini tidak mendukung ARCore&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;        }&#10;    }&#10;&#10;    private fun showPackageInputDialog() {&#10;        val dialog = PackageInputDialog()&#10;        dialog.setOnPackageNameEnteredListener { packageName, declaredSize -&gt;&#10;            val intent = Intent(this, ARMeasurementActivity::class.java)&#10;            intent.putExtra(&quot;PACKAGE_NAME&quot;, packageName)&#10;            intent.putExtra(&quot;DECLARED_SIZE&quot;, declaredSize)&#10;            startActivity(intent)&#10;        }&#10;        dialog.show(supportFragmentManager, &quot;PackageInputDialog&quot;)&#10;    }&#10;&#10;    override fun onRequestPermissionsResult(&#10;        requestCode: Int,&#10;        permissions: Array&lt;out String&gt;,&#10;        grantResults: IntArray&#10;    ) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults)&#10;        if (requestCode == CAMERA_PERMISSION_CODE) {&#10;            if (grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                showPackageInputDialog()&#10;            } else {&#10;                Toast.makeText(&#10;                    this,&#10;                    &quot;Izin kamera diperlukan untuk menggunakan fitur AR&quot;,&#10;                    Toast.LENGTH_LONG&#10;                ).show()&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.paxel.arspacescan.ui.main&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.HapticFeedbackConstants&#10;import android.view.View&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import com.google.android.material.button.MaterialButton&#10;import com.google.ar.core.ArCoreApk&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.ui.history.HistoryActivity&#10;import com.paxel.arspacescan.ui.measurement.ARMeasurementActivity&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private val CAMERA_PERMISSION_CODE = 100&#10;    private var isSplashScreen = true&#10;&#10;    // Extension function untuk haptic feedback yang aman&#10;    private fun View.safeHapticFeedback() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O_MR1) {&#10;            performHapticFeedback(HapticFeedbackConstants.KEYBOARD_PRESS)&#10;        } else {&#10;            performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY)&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Tampilkan splash screen&#10;        setContentView(R.layout.activity_splash)&#10;&#10;        Handler(Looper.getMainLooper()).postDelayed({&#10;            isSplashScreen = false&#10;            setContentView(R.layout.activity_main)&#10;            setupMainMenu()&#10;        }, 2000)&#10;    }&#10;&#10;    private fun setupMainMenu() {&#10;        val startMeasurementButton = findViewById&lt;MaterialButton&gt;(R.id.btnStartMeasurement)&#10;        val historyButton = findViewById&lt;MaterialButton&gt;(R.id.btnHistory)&#10;&#10;        startMeasurementButton.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            checkPermissionsAndStartMeasurement()&#10;        }&#10;&#10;        historyButton.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            startActivity(Intent(this, HistoryActivity::class.java))&#10;        }&#10;    }&#10;&#10;    private fun checkPermissionsAndStartMeasurement() {&#10;        // Cek ketersediaan ARCore&#10;        val availability = ArCoreApk.getInstance().checkAvailability(this)&#10;        if (availability.isTransient) {&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                checkPermissionsAndStartMeasurement()&#10;            }, 200)&#10;            return&#10;        }&#10;&#10;        if (availability.isSupported) {&#10;            if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)&#10;                != PackageManager.PERMISSION_GRANTED&#10;            ) {&#10;                ActivityCompat.requestPermissions(&#10;                    this,&#10;                    arrayOf(Manifest.permission.CAMERA),&#10;                    CAMERA_PERMISSION_CODE&#10;                )&#10;            } else {&#10;                showPackageInputDialog()&#10;            }&#10;        } else {&#10;            Toast.makeText(&#10;                this,&#10;                &quot;Perangkat ini tidak mendukung ARCore&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;        }&#10;    }&#10;&#10;    private fun showPackageInputDialog() {&#10;        val dialog = PackageInputDialog()&#10;        dialog.setOnPackageNameEnteredListener { packageName, declaredSize -&gt;&#10;            val intent = Intent(this, ARMeasurementActivity::class.java)&#10;            intent.putExtra(&quot;PACKAGE_NAME&quot;, packageName)&#10;            intent.putExtra(&quot;DECLARED_SIZE&quot;, declaredSize)&#10;            startActivity(intent)&#10;        }&#10;        dialog.show(supportFragmentManager, &quot;PackageInputDialog&quot;)&#10;    }&#10;&#10;    override fun onRequestPermissionsResult(&#10;        requestCode: Int,&#10;        permissions: Array&lt;out String&gt;,&#10;        grantResults: IntArray&#10;    ) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults)&#10;        if (requestCode == CAMERA_PERMISSION_CODE) {&#10;            if (grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                showPackageInputDialog()&#10;            } else {&#10;                Toast.makeText(&#10;                    this,&#10;                    &quot;Izin kamera diperlukan untuk menggunakan fitur AR&quot;,&#10;                    Toast.LENGTH_LONG&#10;                ).show()&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/measurement/ARMeasurementActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/measurement/ARMeasurementActivity.kt" />
              <option name="originalContent" value="package com.paxel.arspacescan.ui.measurement&#10;&#10;import android.content.ContentValues&#10;import android.content.Intent&#10;import android.graphics.Bitmap&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.HandlerThread&#10;import android.provider.MediaStore&#10;import android.util.Log&#10;import android.view.PixelCopy&#10;import android.view.View&#10;import android.view.animation.AnimationUtils&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.core.view.drawToBitmap&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import com.google.android.material.button.MaterialButton&#10;import com.google.android.material.card.MaterialCardView&#10;import com.google.ar.core.Config&#10;import com.google.ar.core.Plane&#10;import com.google.ar.core.Session&#10;import com.google.ar.core.TrackingState&#10;import com.google.ar.sceneform.AnchorNode&#10;import com.google.ar.sceneform.FrameTime&#10;import com.google.ar.sceneform.Node&#10;import com.google.ar.sceneform.Scene&#10;import com.google.ar.sceneform.math.Quaternion&#10;import com.google.ar.sceneform.math.Vector3&#10;import com.google.ar.sceneform.rendering.Color&#10;import com.google.ar.sceneform.rendering.MaterialFactory&#10;import com.google.ar.sceneform.rendering.ModelRenderable&#10;import com.google.ar.sceneform.rendering.ShapeFactory&#10;import com.google.ar.sceneform.ux.ArFragment&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.data.model.MeasurementResult&#10;import com.paxel.arspacescan.ui.common.safeHapticFeedback&#10;import com.paxel.arspacescan.ui.result.ResultActivity&#10;import com.paxel.arspacescan.util.MeasurementCalculator&#10;import kotlinx.coroutines.launch&#10;import kotlin.math.max&#10;&#10;class ARMeasurementActivity : AppCompatActivity(), Scene.OnUpdateListener {&#10;&#10;    private val viewModel: ARMeasurementViewModel by viewModels {&#10;        object : ViewModelProvider.Factory {&#10;            override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;                return ARMeasurementViewModel(MeasurementCalculator()) as T&#10;            }&#10;        }&#10;    }&#10;&#10;    private var arFragment: ArFragment? = null&#10;    private lateinit var btnTakePhoto: MaterialButton&#10;    private lateinit var cvTrackingHelp: MaterialCardView&#10;    private lateinit var btnUndo: Button&#10;    private lateinit var btnReset: Button&#10;    private var sphereRenderable: ModelRenderable? = null&#10;    private var lineRenderable: ModelRenderable? = null&#10;    private val visualNodes = mutableListOf&lt;Node&gt;()&#10;    private var isArCoreSupported = true&#10;&#10;    // store incoming extras so we can forward them later safely&#10;    private var packageNameExtra: String? = null&#10;    private var declaredSizeExtra: String? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_ar_measurement)&#10;&#10;        // store extras early&#10;        packageNameExtra = intent.getStringExtra(&quot;PACKAGE_NAME&quot;)&#10;        declaredSizeExtra = intent.getStringExtra(&quot;DECLARED_SIZE&quot;)&#10;&#10;        checkARCoreSupport()&#10;        if (!isArCoreSupported) {&#10;            Toast.makeText(this, &quot;ARCore tidak didukung di perangkat ini&quot;, Toast.LENGTH_LONG).show()&#10;            finish()&#10;            return&#10;        }&#10;&#10;        setupUI()&#10;        createRenderables()&#10;        setupAR()&#10;        observeViewModel()&#10;    }&#10;&#10;    private fun checkARCoreSupport() {&#10;        try {&#10;            val availability = com.google.ar.core.ArCoreApk.getInstance().checkAvailability(this)&#10;            isArCoreSupported = availability.isSupported || availability.isTransient&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;ARCore check failed&quot;, e)&#10;            isArCoreSupported = false&#10;        }&#10;    }&#10;&#10;    private fun setupUI() {&#10;        btnUndo = findViewById(R.id.btnUndo)&#10;        btnReset = findViewById(R.id.btnReset)&#10;        btnTakePhoto = findViewById(R.id.btnTakePhoto)&#10;        cvTrackingHelp = findViewById(R.id.cvTrackingHelp)&#10;&#10;        // Tambahkan tombol lanjutkan ke hasil&#10;        val btnContinueToResult = findViewById&lt;MaterialButton&gt;(R.id.btnContinueToResult)&#10;&#10;        btnUndo.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            viewModel.undoLastPoint()&#10;        }&#10;        btnReset.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            viewModel.resetMeasurement()&#10;        }&#10;        btnTakePhoto.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            takePhoto()&#10;        }&#10;&#10;        // Setup tombol lanjutkan ke hasil&#10;        btnContinueToResult.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            proceedToResults()&#10;        }&#10;    }&#10;&#10;    private fun setupAR() {&#10;        try {&#10;            arFragment = (supportFragmentManager.findFragmentById(R.id.arFragment) as? CustomArFragment)&#10;                ?: throw IllegalStateException(&quot;CustomArFragment not found in layout&quot;)&#10;&#10;            // Configure ARCore session to prevent light estimation crash&#10;            arFragment?.arSceneView?.let { sceneView -&gt;&#10;                sceneView.planeRenderer.isEnabled = true&#10;                sceneView.planeRenderer.isVisible = true&#10;            }&#10;&#10;            // add update listener&#10;            arFragment?.arSceneView?.scene?.addOnUpdateListener(this)&#10;&#10;            // tap listener on plane - only accept taps when plane is tracking&#10;            arFragment?.setOnTapArPlaneListener { hitResult, plane, _ -&gt;&#10;                val fragment = arFragment ?: return@setOnTapArPlaneListener&#10;                if (plane.trackingState != TrackingState.TRACKING) {&#10;                    Log.w(&quot;ARMeasurementActivity&quot;, &quot;Tap diabaikan: plane belum tracking.&quot;)&#10;                    return@setOnTapArPlaneListener&#10;                }&#10;                if (viewModel.uiState.value.step != MeasurementStep.COMPLETED) {&#10;                    fragment.view?.safeHapticFeedback()&#10;                    val anchor = hitResult.createAnchor()&#10;                    val anchorNode = AnchorNode(anchor).apply {&#10;                        parent = fragment.arSceneView.scene&#10;                    }&#10;                    if (anchorNode.anchor == null) {&#10;                        Log.e(&quot;ARMeasurementActivity&quot;, &quot;Anchor gagal dibuat.&quot;)&#10;                        return@setOnTapArPlaneListener&#10;                    }&#10;                    viewModel.handleArTap(anchorNode, this@ARMeasurementActivity)&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;AR setup failed&quot;, e)&#10;            Toast.makeText(this, &quot;Gagal memulai AR: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun createRenderables() {&#10;        MaterialFactory.makeOpaqueWithColor(this, Color(android.graphics.Color.RED))&#10;            .thenAccept { material -&gt;&#10;                sphereRenderable = ShapeFactory.makeSphere(0.01f, Vector3.zero(), material)&#10;            }&#10;            .exceptionally { e -&gt;&#10;                Log.e(&quot;ARMeasurementActivity&quot;, &quot;Failed to create sphere renderable&quot;, e)&#10;                null&#10;            }&#10;&#10;        MaterialFactory.makeOpaqueWithColor(this, Color(android.graphics.Color.YELLOW))&#10;            .thenAccept { material -&gt;&#10;                lineRenderable = ShapeFactory.makeCube(&#10;                    Vector3(0.005f, 0.001f, 1f),&#10;                    Vector3.zero(),&#10;                    material&#10;                )&#10;            }&#10;            .exceptionally { e -&gt;&#10;                Log.e(&quot;ARMeasurementActivity&quot;, &quot;Failed to create line renderable&quot;, e)&#10;                null&#10;            }&#10;    }&#10;&#10;    private fun observeViewModel() {&#10;        val tvInstructions: TextView = findViewById(R.id.tvInstructions)&#10;        val fadeInAnimation = AnimationUtils.loadAnimation(this, R.anim.fade_in)&#10;&#10;        lifecycleScope.launch {&#10;            repeatOnLifecycle(Lifecycle.State.STARTED) {&#10;                launch {&#10;                    viewModel.uiState.collect { state -&gt;&#10;                        tvInstructions.apply {&#10;                            val newText = getString(state.instructionTextId)&#10;                            if (text != newText) {&#10;                                text = newText&#10;                                startAnimation(fadeInAnimation)&#10;                            }&#10;                        }&#10;                        btnUndo.isEnabled = state.isUndoEnabled&#10;                        updateArScene(state)&#10;                    }&#10;                }&#10;&#10;                launch {&#10;                    viewModel.navigationEvent.collect { result -&gt;&#10;                        navigateToResult(result)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun updateArScene(state: ARMeasurementUiState) {&#10;        // remove previous visuals&#10;        visualNodes.forEach { it.parent = null }&#10;        visualNodes.clear()&#10;&#10;        // show/hide take photo button&#10;        btnTakePhoto.visibility =&#10;            if (state.step == MeasurementStep.COMPLETED) View.VISIBLE else View.GONE&#10;&#10;        // show/hide continue to result button&#10;        val btnContinueToResult = findViewById&lt;MaterialButton&gt;(R.id.btnContinueToResult)&#10;        btnContinueToResult.visibility =&#10;            if (state.step == MeasurementStep.COMPLETED) View.VISIBLE else View.GONE&#10;&#10;        // add point spheres&#10;        state.points.forEach { addSphere(it.worldPosition) }&#10;&#10;        when (state.step) {&#10;            MeasurementStep.BASE_DEFINED -&gt; {&#10;                val cornerPositions = state.corners.map { it.worldPosition }&#10;                if (cornerPositions.size &gt;= 4) drawBase(cornerPositions)&#10;            }&#10;&#10;            MeasurementStep.COMPLETED -&gt; {&#10;                val cornerPositions = state.corners.map { it.worldPosition }&#10;                if (cornerPositions.size == 8) drawWireframeBox(cornerPositions)&#10;            }&#10;&#10;            else -&gt; { /* START or other states */&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onUpdate(frameTime: FrameTime?) {&#10;        val fragment = arFragment ?: return&#10;        val frame = fragment.arSceneView.arFrame ?: return&#10;        val isTracking = frame.camera.trackingState == TrackingState.TRACKING&#10;        cvTrackingHelp.visibility = if (isTracking) View.GONE else View.VISIBLE&#10;&#10;        val currentState = viewModel.uiState.value&#10;        if (isTracking &amp;&amp; currentState.step == MeasurementStep.BASE_DEFINED &amp;&amp; currentState.corners.isNotEmpty()) {&#10;            // clear previous preview edges&#10;            visualNodes.filter { it.name == &quot;wireframe_edge_preview&quot; }&#10;                .forEach { it.parent = null }&#10;            visualNodes.removeAll { it.name == &quot;wireframe_edge_preview&quot; }&#10;&#10;            val screenCenterX = fragment.arSceneView.width / 2f&#10;            val screenCenterY = fragment.arSceneView.height / 2f&#10;            val hitResults = frame.hitTest(screenCenterX, screenCenterY)&#10;&#10;            val planeHit = hitResults.firstOrNull {&#10;                it.trackable is Plane &amp;&amp; (it.trackable as Plane).isPoseInPolygon(it.hitPose)&#10;            }&#10;&#10;            planeHit?.let { hit -&gt;&#10;                val pA = currentState.corners[0].worldPosition&#10;                val height = max(0.01f, hit.hitPose.ty() - pA.y)&#10;                val baseCornersPos = currentState.corners.map { it.worldPosition }&#10;                val topCornersPos = baseCornersPos.map {&#10;                    Vector3(it.x, pA.y + height, it.z)&#10;                }&#10;                drawWireframeBox(baseCornersPos + topCornersPos, isPreview = true)&#10;            }&#10;        } else {&#10;            visualNodes.filter { it.name == &quot;wireframe_edge_preview&quot; }&#10;                .forEach { it.parent = null }&#10;            visualNodes.removeAll { it.name == &quot;wireframe_edge_preview&quot; }&#10;        }&#10;    }&#10;&#10;    private fun addSphere(position: Vector3) {&#10;        val fragment = arFragment ?: return&#10;        val renderable = sphereRenderable&#10;        if (renderable == null) {&#10;            Log.w(&quot;ARMeasurementActivity&quot;, &quot;Sphere renderable belum siap&quot;)&#10;            return&#10;        }&#10;        val node = Node().apply {&#10;            this.renderable = renderable&#10;            parent = fragment.arSceneView.scene&#10;            worldPosition = position&#10;        }&#10;        visualNodes.add(node)&#10;    }&#10;&#10;    private fun drawBase(baseCorners: List&lt;Vector3&gt;) {&#10;        if (baseCorners.size &lt; 4) return&#10;        for (i in 0..3) {&#10;            drawLine(baseCorners[i], baseCorners[(i + 1) % 4], &quot;wireframe_edge&quot;)?.let {&#10;                visualNodes.add(it)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun drawWireframeBox(corners: List&lt;Vector3&gt;, isPreview: Boolean = false) {&#10;        if (corners.size != 8) return&#10;&#10;        val base = corners.subList(0, 4)&#10;        val top = corners.subList(4, 8)&#10;        val lineName = if (isPreview) &quot;wireframe_edge_preview&quot; else &quot;wireframe_edge&quot;&#10;&#10;        for (i in 0..3) {&#10;            drawLine(base[i], base[(i + 1) % 4], lineName)?.let { visualNodes.add(it) }&#10;            drawLine(top[i], top[(i + 1) % 4], lineName)?.let { visualNodes.add(it) }&#10;            drawLine(base[i], top[i], lineName)?.let { visualNodes.add(it) }&#10;        }&#10;    }&#10;&#10;    private fun drawLine(from: Vector3, to: Vector3, name: String): Node? {&#10;        val fragment = arFragment ?: return null&#10;        val baseRenderable = lineRenderable&#10;        if (baseRenderable == null) {&#10;            Log.w(&quot;ARMeasurementActivity&quot;, &quot;Line renderable belum siap&quot;)&#10;            return null&#10;        }&#10;&#10;        val dir = Vector3.subtract(to, from)&#10;        val length = dir.length()&#10;        if (length &lt;= 0f) return null&#10;&#10;        return Node().apply {&#10;            this.name = name&#10;            parent = fragment.arSceneView.scene&#10;            renderable = baseRenderable.makeCopy()&#10;            worldPosition = Vector3.add(from, to).scaled(0.5f)&#10;            worldRotation = Quaternion.lookRotation(dir.normalized(), Vector3.up())&#10;            localScale = Vector3(1f, 1f, length)&#10;        }&#10;    }&#10;&#10;    private fun navigateToResult(result: MeasurementResult) {&#10;        val intent = Intent(this, ResultActivity::class.java).apply {&#10;            putExtra(&quot;MEASUREMENT_RESULT&quot;, result)&#10;            putExtra(&quot;PACKAGE_NAME&quot;, packageNameExtra)&#10;            putExtra(&quot;DECLARED_SIZE&quot;, declaredSizeExtra)&#10;        }&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun takePhoto() {&#10;        val fragment = arFragment ?: run {&#10;            Toast.makeText(this, &quot;AR scene belum siap&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        val view = fragment.arSceneView&#10;        if (view.width == 0 || view.height == 0) {&#10;            Toast.makeText(this, &quot;Ukuran preview belum tersedia&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        val bitmap = view.drawToBitmap()&#10;&#10;        val handlerThread = HandlerThread(&quot;PixelCopier&quot;).apply { start() }&#10;&#10;        try {&#10;            PixelCopy.request(view, bitmap, { copyResult -&gt;&#10;                try {&#10;                    if (copyResult == PixelCopy.SUCCESS) {&#10;                        saveBitmapToGallery(bitmap)&#10;                    } else {&#10;                        runOnUiThread {&#10;                            Toast.makeText(&#10;                                this,&#10;                                &quot;Gagal mengambil gambar: $copyResult&quot;,&#10;                                Toast.LENGTH_LONG&#10;                            ).show()&#10;                        }&#10;                    }&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;ARMeasurementActivity&quot;, &quot;PixelCopy callback error&quot;, e)&#10;                    runOnUiThread {&#10;                        Toast.makeText(&#10;                            this,&#10;                            &quot;Error saat mengambil gambar: ${e.message}&quot;,&#10;                            Toast.LENGTH_LONG&#10;                        ).show()&#10;                    }&#10;                } finally {&#10;                    handlerThread.quitSafely()&#10;                }&#10;            }, Handler(handlerThread.looper))&#10;        } catch (e: Exception) {&#10;            handlerThread.quitSafely()&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;PixelCopy request failed&quot;, e)&#10;            Toast.makeText(this, &quot;Error: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;        }&#10;    }&#10;&#10;    private fun saveBitmapToGallery(bitmap: Bitmap) {&#10;        val filename = &quot;PaxelAR_${System.currentTimeMillis()}.jpg&quot;&#10;        val values = ContentValues().apply {&#10;            put(MediaStore.Images.Media.DISPLAY_NAME, filename)&#10;            put(MediaStore.Images.Media.MIME_TYPE, &quot;image/jpeg&quot;)&#10;            put(MediaStore.Images.Media.RELATIVE_PATH, &quot;Pictures/PaxelARValidator&quot;)&#10;            put(MediaStore.Images.Media.IS_PENDING, 1)&#10;        }&#10;&#10;        try {&#10;            val resolver = contentResolver&#10;            val uri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values)&#10;            if (uri == null) {&#10;                runOnUiThread {&#10;                    Toast.makeText(this, &quot;Gagal membuat file&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                return&#10;            }&#10;&#10;            resolver.openOutputStream(uri)?.use { outputStream -&gt;&#10;                if (bitmap.compress(Bitmap.CompressFormat.JPEG, 90, outputStream)) {&#10;                    values.put(MediaStore.Images.Media.IS_PENDING, 0)&#10;                    resolver.update(uri, values, null, null)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Foto disimpan di Galeri&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                } else {&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Gagal kompresi gambar&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error saving image&quot;, e)&#10;            runOnUiThread {&#10;                Toast.makeText(this, &quot;Error menyimpan foto: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun proceedToResults() {&#10;        // Ambil hasil pengukuran dari ViewModel&#10;        val result = viewModel.getMeasurementResult() ?: run {&#10;            Toast.makeText(this, &quot;Tidak ada hasil pengukuran untuk dilanjutkan&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        // Navigasi ke Activity hasil dengan membawa data hasil pengukuran&#10;        val intent = Intent(this, ResultActivity::class.java).apply {&#10;            putExtra(&quot;MEASUREMENT_RESULT&quot;, result)&#10;            putExtra(&quot;PACKAGE_NAME&quot;, packageNameExtra)&#10;            putExtra(&quot;DECLARED_SIZE&quot;, declaredSizeExtra)&#10;        }&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        try {&#10;            arFragment?.onResume()&#10;            arFragment?.arSceneView?.resume()&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error resume AR&quot;, e)&#10;            Toast.makeText(this, &quot;Gagal melanjutkan AR: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            // don't force finish here; optionally finish if AR is critical&#10;        }&#10;    }&#10;&#10;    override fun onPause() {&#10;        try {&#10;            arFragment?.arSceneView?.pause()&#10;            arFragment?.onPause()&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error pause AR&quot;, e)&#10;        }&#10;        super.onPause()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        try {&#10;            sphereRenderable?.let {&#10;                it.isShadowCaster = false&#10;                it.isShadowReceiver = false&#10;            }&#10;            sphereRenderable = null&#10;        } catch (e: Exception) {&#10;            Log.w(&quot;ARMeasurementActivity&quot;, &quot;Error releasing sphereRenderable&quot;, e)&#10;        }&#10;&#10;        try {&#10;            lineRenderable?.let {&#10;                it.isShadowCaster = false&#10;                it.isShadowReceiver = false&#10;            }&#10;            lineRenderable = null&#10;        } catch (e: Exception) {&#10;            Log.w(&quot;ARMeasurementActivity&quot;, &quot;Error releasing lineRenderable&quot;, e)&#10;        }&#10;&#10;        super.onDestroy()&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.paxel.arspacescan.ui.measurement&#10;&#10;import android.content.ContentValues&#10;import android.content.Intent&#10;import android.graphics.Bitmap&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.HandlerThread&#10;import android.provider.MediaStore&#10;import android.util.Log&#10;import android.view.PixelCopy&#10;import android.view.View&#10;import android.view.animation.AnimationUtils&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.core.view.drawToBitmap&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import com.google.android.material.button.MaterialButton&#10;import com.google.android.material.card.MaterialCardView&#10;import com.google.ar.core.Config&#10;import com.google.ar.core.Plane&#10;import com.google.ar.core.Session&#10;import com.google.ar.core.TrackingState&#10;import com.google.ar.sceneform.AnchorNode&#10;import com.google.ar.sceneform.FrameTime&#10;import com.google.ar.sceneform.Node&#10;import com.google.ar.sceneform.Scene&#10;import com.google.ar.sceneform.math.Quaternion&#10;import com.google.ar.sceneform.math.Vector3&#10;import com.google.ar.sceneform.rendering.Color&#10;import com.google.ar.sceneform.rendering.MaterialFactory&#10;import com.google.ar.sceneform.rendering.ModelRenderable&#10;import com.google.ar.sceneform.rendering.ShapeFactory&#10;import com.google.ar.sceneform.ux.ArFragment&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.data.model.MeasurementResult&#10;import com.paxel.arspacescan.ui.common.safeHapticFeedback&#10;import com.paxel.arspacescan.ui.result.ResultActivity&#10;import com.paxel.arspacescan.util.MeasurementCalculator&#10;import kotlinx.coroutines.launch&#10;import kotlin.math.max&#10;&#10;class ARMeasurementActivity : AppCompatActivity(), Scene.OnUpdateListener {&#10;&#10;    private val viewModel: ARMeasurementViewModel by viewModels {&#10;        object : ViewModelProvider.Factory {&#10;            override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;                return ARMeasurementViewModel(MeasurementCalculator()) as T&#10;            }&#10;        }&#10;    }&#10;&#10;    private var arFragment: ArFragment? = null&#10;    private lateinit var btnTakePhoto: MaterialButton&#10;    private lateinit var cvTrackingHelp: MaterialCardView&#10;    private lateinit var btnUndo: MaterialButton&#10;    private lateinit var btnReset: MaterialButton&#10;    private var sphereRenderable: ModelRenderable? = null&#10;    private var lineRenderable: ModelRenderable? = null&#10;    private val visualNodes = mutableListOf&lt;Node&gt;()&#10;    private var isArCoreSupported = true&#10;&#10;    // store incoming extras so we can forward them later safely&#10;    private var packageNameExtra: String? = null&#10;    private var declaredSizeExtra: String? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_ar_measurement)&#10;&#10;        // store extras early&#10;        packageNameExtra = intent.getStringExtra(&quot;PACKAGE_NAME&quot;)&#10;        declaredSizeExtra = intent.getStringExtra(&quot;DECLARED_SIZE&quot;)&#10;&#10;        checkARCoreSupport()&#10;        if (!isArCoreSupported) {&#10;            Toast.makeText(this, &quot;ARCore tidak didukung di perangkat ini&quot;, Toast.LENGTH_LONG).show()&#10;            finish()&#10;            return&#10;        }&#10;&#10;        setupUI()&#10;        createRenderables()&#10;        setupAR()&#10;        observeViewModel()&#10;    }&#10;&#10;    private fun checkARCoreSupport() {&#10;        try {&#10;            val availability = com.google.ar.core.ArCoreApk.getInstance().checkAvailability(this)&#10;            isArCoreSupported = availability.isSupported || availability.isTransient&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;ARCore check failed&quot;, e)&#10;            isArCoreSupported = false&#10;        }&#10;    }&#10;&#10;    private fun setupUI() {&#10;        btnUndo = findViewById(R.id.btnUndo)&#10;        btnReset = findViewById(R.id.btnReset)&#10;        btnTakePhoto = findViewById(R.id.btnTakePhoto)&#10;        cvTrackingHelp = findViewById(R.id.cvTrackingHelp)&#10;&#10;        // Tambahkan tombol lanjutkan ke hasil&#10;        val btnContinueToResult = findViewById&lt;MaterialButton&gt;(R.id.btnContinueToResult)&#10;&#10;        btnUndo.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            viewModel.undoLastPoint()&#10;        }&#10;        btnReset.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            viewModel.resetMeasurement()&#10;        }&#10;        btnTakePhoto.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            takePhoto()&#10;        }&#10;&#10;        // Setup tombol lanjutkan ke hasil&#10;        btnContinueToResult.setOnClickListener {&#10;            it.safeHapticFeedback()&#10;            proceedToResults()&#10;        }&#10;    }&#10;&#10;    private fun setupAR() {&#10;        try {&#10;            arFragment = (supportFragmentManager.findFragmentById(R.id.arFragment) as? CustomArFragment)&#10;                ?: throw IllegalStateException(&quot;CustomArFragment not found in layout&quot;)&#10;&#10;            // Configure ARCore session to prevent light estimation crash&#10;            arFragment?.arSceneView?.let { sceneView -&gt;&#10;                sceneView.planeRenderer.isEnabled = true&#10;                sceneView.planeRenderer.isVisible = true&#10;            }&#10;&#10;            // add update listener&#10;            arFragment?.arSceneView?.scene?.addOnUpdateListener(this)&#10;&#10;            // tap listener on plane - only accept taps when plane is tracking&#10;            arFragment?.setOnTapArPlaneListener { hitResult, plane, _ -&gt;&#10;                val fragment = arFragment ?: return@setOnTapArPlaneListener&#10;                if (plane.trackingState != TrackingState.TRACKING) {&#10;                    Log.w(&quot;ARMeasurementActivity&quot;, &quot;Tap diabaikan: plane belum tracking.&quot;)&#10;                    return@setOnTapArPlaneListener&#10;                }&#10;                if (viewModel.uiState.value.step != MeasurementStep.COMPLETED) {&#10;                    fragment.view?.safeHapticFeedback()&#10;                    val anchor = hitResult.createAnchor()&#10;                    val anchorNode = AnchorNode(anchor).apply {&#10;                        parent = fragment.arSceneView.scene&#10;                    }&#10;                    if (anchorNode.anchor == null) {&#10;                        Log.e(&quot;ARMeasurementActivity&quot;, &quot;Anchor gagal dibuat.&quot;)&#10;                        return@setOnTapArPlaneListener&#10;                    }&#10;                    viewModel.handleArTap(anchorNode, this@ARMeasurementActivity)&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;AR setup failed&quot;, e)&#10;            Toast.makeText(this, &quot;Gagal memulai AR: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun createRenderables() {&#10;        MaterialFactory.makeOpaqueWithColor(this, Color(android.graphics.Color.RED))&#10;            .thenAccept { material -&gt;&#10;                sphereRenderable = ShapeFactory.makeSphere(0.01f, Vector3.zero(), material)&#10;            }&#10;            .exceptionally { e -&gt;&#10;                Log.e(&quot;ARMeasurementActivity&quot;, &quot;Failed to create sphere renderable&quot;, e)&#10;                null&#10;            }&#10;&#10;        MaterialFactory.makeOpaqueWithColor(this, Color(android.graphics.Color.YELLOW))&#10;            .thenAccept { material -&gt;&#10;                lineRenderable = ShapeFactory.makeCube(&#10;                    Vector3(0.005f, 0.001f, 1f),&#10;                    Vector3.zero(),&#10;                    material&#10;                )&#10;            }&#10;            .exceptionally { e -&gt;&#10;                Log.e(&quot;ARMeasurementActivity&quot;, &quot;Failed to create line renderable&quot;, e)&#10;                null&#10;            }&#10;    }&#10;&#10;    private fun observeViewModel() {&#10;        val tvInstructions: TextView = findViewById(R.id.tvInstructions)&#10;        val fadeInAnimation = AnimationUtils.loadAnimation(this, R.anim.fade_in)&#10;&#10;        lifecycleScope.launch {&#10;            repeatOnLifecycle(Lifecycle.State.STARTED) {&#10;                launch {&#10;                    viewModel.uiState.collect { state -&gt;&#10;                        tvInstructions.apply {&#10;                            val newText = getString(state.instructionTextId)&#10;                            if (text != newText) {&#10;                                text = newText&#10;                                startAnimation(fadeInAnimation)&#10;                            }&#10;                        }&#10;                        btnUndo.isEnabled = state.isUndoEnabled&#10;                        updateArScene(state)&#10;                    }&#10;                }&#10;&#10;                launch {&#10;                    viewModel.navigationEvent.collect { result -&gt;&#10;                        navigateToResult(result)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun updateArScene(state: ARMeasurementUiState) {&#10;        // remove previous visuals&#10;        visualNodes.forEach { it.parent = null }&#10;        visualNodes.clear()&#10;&#10;        // show/hide take photo button&#10;        btnTakePhoto.visibility =&#10;            if (state.step == MeasurementStep.COMPLETED) View.VISIBLE else View.GONE&#10;&#10;        // show/hide continue to result button&#10;        val btnContinueToResult = findViewById&lt;MaterialButton&gt;(R.id.btnContinueToResult)&#10;        btnContinueToResult.visibility =&#10;            if (state.step == MeasurementStep.COMPLETED) View.VISIBLE else View.GONE&#10;&#10;        // add point spheres&#10;        state.points.forEach { addSphere(it.worldPosition) }&#10;&#10;        when (state.step) {&#10;            MeasurementStep.BASE_DEFINED -&gt; {&#10;                val cornerPositions = state.corners.map { it.worldPosition }&#10;                if (cornerPositions.size &gt;= 4) drawBase(cornerPositions)&#10;            }&#10;&#10;            MeasurementStep.COMPLETED -&gt; {&#10;                val cornerPositions = state.corners.map { it.worldPosition }&#10;                if (cornerPositions.size == 8) drawWireframeBox(cornerPositions)&#10;            }&#10;&#10;            else -&gt; { /* START or other states */&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onUpdate(frameTime: FrameTime?) {&#10;        val fragment = arFragment ?: return&#10;        val frame = fragment.arSceneView.arFrame ?: return&#10;        val isTracking = frame.camera.trackingState == TrackingState.TRACKING&#10;        cvTrackingHelp.visibility = if (isTracking) View.GONE else View.VISIBLE&#10;&#10;        val currentState = viewModel.uiState.value&#10;        if (isTracking &amp;&amp; currentState.step == MeasurementStep.BASE_DEFINED &amp;&amp; currentState.corners.isNotEmpty()) {&#10;            // clear previous preview edges&#10;            visualNodes.filter { it.name == &quot;wireframe_edge_preview&quot; }&#10;                .forEach { it.parent = null }&#10;            visualNodes.removeAll { it.name == &quot;wireframe_edge_preview&quot; }&#10;&#10;            val screenCenterX = fragment.arSceneView.width / 2f&#10;            val screenCenterY = fragment.arSceneView.height / 2f&#10;            val hitResults = frame.hitTest(screenCenterX, screenCenterY)&#10;&#10;            val planeHit = hitResults.firstOrNull {&#10;                it.trackable is Plane &amp;&amp; (it.trackable as Plane).isPoseInPolygon(it.hitPose)&#10;            }&#10;&#10;            planeHit?.let { hit -&gt;&#10;                val pA = currentState.corners[0].worldPosition&#10;                val height = max(0.01f, hit.hitPose.ty() - pA.y)&#10;                val baseCornersPos = currentState.corners.map { it.worldPosition }&#10;                val topCornersPos = baseCornersPos.map {&#10;                    Vector3(it.x, pA.y + height, it.z)&#10;                }&#10;                drawWireframeBox(baseCornersPos + topCornersPos, isPreview = true)&#10;            }&#10;        } else {&#10;            visualNodes.filter { it.name == &quot;wireframe_edge_preview&quot; }&#10;                .forEach { it.parent = null }&#10;            visualNodes.removeAll { it.name == &quot;wireframe_edge_preview&quot; }&#10;        }&#10;    }&#10;&#10;    private fun addSphere(position: Vector3) {&#10;        val fragment = arFragment ?: return&#10;        val renderable = sphereRenderable&#10;        if (renderable == null) {&#10;            Log.w(&quot;ARMeasurementActivity&quot;, &quot;Sphere renderable belum siap&quot;)&#10;            return&#10;        }&#10;        val node = Node().apply {&#10;            this.renderable = renderable&#10;            parent = fragment.arSceneView.scene&#10;            worldPosition = position&#10;        }&#10;        visualNodes.add(node)&#10;    }&#10;&#10;    private fun drawBase(baseCorners: List&lt;Vector3&gt;) {&#10;        if (baseCorners.size &lt; 4) return&#10;        for (i in 0..3) {&#10;            drawLine(baseCorners[i], baseCorners[(i + 1) % 4], &quot;wireframe_edge&quot;)?.let {&#10;                visualNodes.add(it)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun drawWireframeBox(corners: List&lt;Vector3&gt;, isPreview: Boolean = false) {&#10;        if (corners.size != 8) return&#10;&#10;        val base = corners.subList(0, 4)&#10;        val top = corners.subList(4, 8)&#10;        val lineName = if (isPreview) &quot;wireframe_edge_preview&quot; else &quot;wireframe_edge&quot;&#10;&#10;        for (i in 0..3) {&#10;            drawLine(base[i], base[(i + 1) % 4], lineName)?.let { visualNodes.add(it) }&#10;            drawLine(top[i], top[(i + 1) % 4], lineName)?.let { visualNodes.add(it) }&#10;            drawLine(base[i], top[i], lineName)?.let { visualNodes.add(it) }&#10;        }&#10;    }&#10;&#10;    private fun drawLine(from: Vector3, to: Vector3, name: String): Node? {&#10;        val fragment = arFragment ?: return null&#10;        val baseRenderable = lineRenderable&#10;        if (baseRenderable == null) {&#10;            Log.w(&quot;ARMeasurementActivity&quot;, &quot;Line renderable belum siap&quot;)&#10;            return null&#10;        }&#10;&#10;        val dir = Vector3.subtract(to, from)&#10;        val length = dir.length()&#10;        if (length &lt;= 0f) return null&#10;&#10;        return Node().apply {&#10;            this.name = name&#10;            parent = fragment.arSceneView.scene&#10;            renderable = baseRenderable.makeCopy()&#10;            worldPosition = Vector3.add(from, to).scaled(0.5f)&#10;            worldRotation = Quaternion.lookRotation(dir.normalized(), Vector3.up())&#10;            localScale = Vector3(1f, 1f, length)&#10;        }&#10;    }&#10;&#10;    private fun navigateToResult(result: MeasurementResult) {&#10;        val intent = Intent(this, ResultActivity::class.java).apply {&#10;            putExtra(&quot;MEASUREMENT_RESULT&quot;, result)&#10;            putExtra(&quot;PACKAGE_NAME&quot;, packageNameExtra)&#10;            putExtra(&quot;DECLARED_SIZE&quot;, declaredSizeExtra)&#10;        }&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun takePhoto() {&#10;        val fragment = arFragment ?: run {&#10;            Toast.makeText(this, &quot;AR scene belum siap&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        val view = fragment.arSceneView&#10;        if (view.width == 0 || view.height == 0) {&#10;            Toast.makeText(this, &quot;Ukuran preview belum tersedia&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        val bitmap = view.drawToBitmap()&#10;&#10;        val handlerThread = HandlerThread(&quot;PixelCopier&quot;).apply { start() }&#10;&#10;        try {&#10;            PixelCopy.request(view, bitmap, { copyResult -&gt;&#10;                try {&#10;                    if (copyResult == PixelCopy.SUCCESS) {&#10;                        saveBitmapToGallery(bitmap)&#10;                    } else {&#10;                        runOnUiThread {&#10;                            Toast.makeText(&#10;                                this,&#10;                                &quot;Gagal mengambil gambar: $copyResult&quot;,&#10;                                Toast.LENGTH_LONG&#10;                            ).show()&#10;                        }&#10;                    }&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;ARMeasurementActivity&quot;, &quot;PixelCopy callback error&quot;, e)&#10;                    runOnUiThread {&#10;                        Toast.makeText(&#10;                            this,&#10;                            &quot;Error saat mengambil gambar: ${e.message}&quot;,&#10;                            Toast.LENGTH_LONG&#10;                        ).show()&#10;                    }&#10;                } finally {&#10;                    handlerThread.quitSafely()&#10;                }&#10;            }, Handler(handlerThread.looper))&#10;        } catch (e: Exception) {&#10;            handlerThread.quitSafely()&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;PixelCopy request failed&quot;, e)&#10;            Toast.makeText(this, &quot;Error: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;        }&#10;    }&#10;&#10;    private fun saveBitmapToGallery(bitmap: Bitmap) {&#10;        val filename = &quot;PaxelAR_${System.currentTimeMillis()}.jpg&quot;&#10;        val values = ContentValues().apply {&#10;            put(MediaStore.Images.Media.DISPLAY_NAME, filename)&#10;            put(MediaStore.Images.Media.MIME_TYPE, &quot;image/jpeg&quot;)&#10;            put(MediaStore.Images.Media.RELATIVE_PATH, &quot;Pictures/PaxelARValidator&quot;)&#10;            put(MediaStore.Images.Media.IS_PENDING, 1)&#10;        }&#10;&#10;        try {&#10;            val resolver = contentResolver&#10;            val uri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values)&#10;            if (uri == null) {&#10;                runOnUiThread {&#10;                    Toast.makeText(this, &quot;Gagal membuat file&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                return&#10;            }&#10;&#10;            resolver.openOutputStream(uri)?.use { outputStream -&gt;&#10;                if (bitmap.compress(Bitmap.CompressFormat.JPEG, 90, outputStream)) {&#10;                    values.put(MediaStore.Images.Media.IS_PENDING, 0)&#10;                    resolver.update(uri, values, null, null)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Foto disimpan di Galeri&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                } else {&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Gagal kompresi gambar&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error saving image&quot;, e)&#10;            runOnUiThread {&#10;                Toast.makeText(this, &quot;Error menyimpan foto: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun proceedToResults() {&#10;        // Ambil hasil pengukuran dari ViewModel&#10;        val result = viewModel.getMeasurementResult() ?: run {&#10;            Toast.makeText(this, &quot;Tidak ada hasil pengukuran untuk dilanjutkan&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        // Navigasi ke Activity hasil dengan membawa data hasil pengukuran&#10;        val intent = Intent(this, ResultActivity::class.java).apply {&#10;            putExtra(&quot;MEASUREMENT_RESULT&quot;, result)&#10;            putExtra(&quot;PACKAGE_NAME&quot;, packageNameExtra)&#10;            putExtra(&quot;DECLARED_SIZE&quot;, declaredSizeExtra)&#10;        }&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        try {&#10;            arFragment?.onResume()&#10;            arFragment?.arSceneView?.resume()&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error resume AR&quot;, e)&#10;            Toast.makeText(this, &quot;Gagal melanjutkan AR: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            // don't force finish here; optionally finish if AR is critical&#10;        }&#10;    }&#10;&#10;    override fun onPause() {&#10;        try {&#10;            arFragment?.arSceneView?.pause()&#10;            arFragment?.onPause()&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ARMeasurementActivity&quot;, &quot;Error pause AR&quot;, e)&#10;        }&#10;        super.onPause()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        try {&#10;            sphereRenderable?.let {&#10;                it.isShadowCaster = false&#10;                it.isShadowReceiver = false&#10;            }&#10;            sphereRenderable = null&#10;        } catch (e: Exception) {&#10;            Log.w(&quot;ARMeasurementActivity&quot;, &quot;Error releasing sphereRenderable&quot;, e)&#10;        }&#10;&#10;        try {&#10;            lineRenderable?.let {&#10;                it.isShadowCaster = false&#10;                it.isShadowReceiver = false&#10;            }&#10;            lineRenderable = null&#10;        } catch (e: Exception) {&#10;            Log.w(&quot;ARMeasurementActivity&quot;, &quot;Error releasing lineRenderable&quot;, e)&#10;        }&#10;&#10;        super.onDestroy()&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/measurement/ARMeasurementViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/measurement/ARMeasurementViewModel.kt" />
              <option name="originalContent" value="package com.paxel.arspacescan.ui.measurement&#10;&#10;import android.content.Context&#10;import android.widget.Toast&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.ar.sceneform.AnchorNode&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.data.model.MeasurementResult&#10;import com.paxel.arspacescan.util.MeasurementCalculator&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;&#10;data class ARMeasurementUiState(&#10;    val step: MeasurementStep = MeasurementStep.START,&#10;    val instructionTextId: Int = R.string.instruction_step_1,&#10;    val points: List&lt;AnchorNode&gt; = emptyList(),&#10;    val corners: List&lt;AnchorNode&gt; = emptyList(),&#10;    val isUndoEnabled: Boolean = false,&#10;    val finalResult: MeasurementResult? = null&#10;)&#10;&#10;class ARMeasurementViewModel(private val calculator: MeasurementCalculator) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(ARMeasurementUiState())&#10;    val uiState: StateFlow&lt;ARMeasurementUiState&gt; = _uiState.asStateFlow()&#10;&#10;    private val _navigationEvent = MutableSharedFlow&lt;MeasurementResult&gt;()&#10;    val navigationEvent: SharedFlow&lt;MeasurementResult&gt; = _navigationEvent.asSharedFlow()&#10;&#10;    fun handleArTap(tappedNode: AnchorNode, context: Context) {&#10;        viewModelScope.launch {&#10;            val currentState = _uiState.value&#10;&#10;            when {&#10;                currentState.points.isEmpty() -&gt; {&#10;                    _uiState.value = currentState.copy(&#10;                        points = listOf(tappedNode),&#10;                        instructionTextId = R.string.instruction_step_2,&#10;                        isUndoEnabled = true&#10;                    )&#10;                }&#10;                currentState.points.size == 1 -&gt; {&#10;                    val p1 = currentState.points[0]&#10;                    val p2 = tappedNode&#10;                    val allBasePoints = calculator.calculateBaseCorners(p1, p2)&#10;                    _uiState.value = _uiState.value.copy(&#10;                        step = MeasurementStep.BASE_DEFINED,&#10;                        instructionTextId = R.string.instruction_step_3,&#10;                        points = currentState.points + p2,&#10;                        corners = allBasePoints&#10;                    )&#10;                }&#10;                currentState.step == MeasurementStep.BASE_DEFINED -&gt; {&#10;                    val heightPoint = tappedNode&#10;                    val baseCorners = currentState.corners&#10;                    val result = calculator.calculate3DBox(baseCorners, heightPoint)&#10;                    if (result != null) {&#10;                        _uiState.value = currentState.copy(&#10;                            step = MeasurementStep.COMPLETED,&#10;                            instructionTextId = R.string.instruction_completed,&#10;                            points = currentState.points + heightPoint,&#10;                            corners = result.allCorners,&#10;                            isUndoEnabled = false,&#10;                            finalResult = result.measurement&#10;                        )&#10;                    } else {&#10;                        Toast.makeText(context, &quot;Pengukuran tidak valid, coba lagi.&quot;, Toast.LENGTH_SHORT).show()&#10;                        resetMeasurement()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun undoLastPoint() {&#10;        resetMeasurement()&#10;    }&#10;&#10;    fun resetMeasurement() {&#10;        _uiState.value.points.forEach { it.anchor?.detach() }&#10;        _uiState.value = ARMeasurementUiState()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.paxel.arspacescan.ui.measurement&#10;&#10;import android.content.Context&#10;import android.widget.Toast&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.ar.sceneform.AnchorNode&#10;import com.paxel.arspacescan.R&#10;import com.paxel.arspacescan.data.model.MeasurementResult&#10;import com.paxel.arspacescan.util.MeasurementCalculator&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;&#10;data class ARMeasurementUiState(&#10;    val step: MeasurementStep = MeasurementStep.START,&#10;    val instructionTextId: Int = R.string.instruction_step_1,&#10;    val points: List&lt;AnchorNode&gt; = emptyList(),&#10;    val corners: List&lt;AnchorNode&gt; = emptyList(),&#10;    val isUndoEnabled: Boolean = false,&#10;    val finalResult: MeasurementResult? = null&#10;)&#10;&#10;class ARMeasurementViewModel(private val calculator: MeasurementCalculator) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(ARMeasurementUiState())&#10;    val uiState: StateFlow&lt;ARMeasurementUiState&gt; = _uiState.asStateFlow()&#10;&#10;    private val _navigationEvent = MutableSharedFlow&lt;MeasurementResult&gt;()&#10;    val navigationEvent: SharedFlow&lt;MeasurementResult&gt; = _navigationEvent.asSharedFlow()&#10;&#10;    fun handleArTap(tappedNode: AnchorNode, context: Context) {&#10;        viewModelScope.launch {&#10;            val currentState = _uiState.value&#10;&#10;            when {&#10;                currentState.points.isEmpty() -&gt; {&#10;                    _uiState.value = currentState.copy(&#10;                        points = listOf(tappedNode),&#10;                        instructionTextId = R.string.instruction_step_2,&#10;                        isUndoEnabled = true&#10;                    )&#10;                }&#10;                currentState.points.size == 1 -&gt; {&#10;                    val p1 = currentState.points[0]&#10;                    val p2 = tappedNode&#10;                    val allBasePoints = calculator.calculateBaseCorners(p1, p2)&#10;                    _uiState.value = _uiState.value.copy(&#10;                        step = MeasurementStep.BASE_DEFINED,&#10;                        instructionTextId = R.string.instruction_step_3,&#10;                        points = currentState.points + p2,&#10;                        corners = allBasePoints&#10;                    )&#10;                }&#10;                currentState.step == MeasurementStep.BASE_DEFINED -&gt; {&#10;                    val heightPoint = tappedNode&#10;                    val baseCorners = currentState.corners&#10;                    val result = calculator.calculate3DBox(baseCorners, heightPoint)&#10;                    if (result != null) {&#10;                        _uiState.value = currentState.copy(&#10;                            step = MeasurementStep.COMPLETED,&#10;                            instructionTextId = R.string.instruction_completed,&#10;                            points = currentState.points + heightPoint,&#10;                            corners = result.allCorners,&#10;                            isUndoEnabled = false,&#10;                            finalResult = result.measurement&#10;                        )&#10;                    } else {&#10;                        Toast.makeText(context, &quot;Pengukuran tidak valid, coba lagi.&quot;, Toast.LENGTH_SHORT).show()&#10;                        resetMeasurement()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun undoLastPoint() {&#10;        resetMeasurement()&#10;    }&#10;&#10;    fun resetMeasurement() {&#10;        _uiState.value.points.forEach { it.anchor?.detach() }&#10;        _uiState.value = ARMeasurementUiState()&#10;    }&#10;&#10;    // Method untuk mendapatkan hasil pengukuran yang sudah selesai&#10;    fun getMeasurementResult(): MeasurementResult? {&#10;        return _uiState.value.finalResult&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/measurement/CustomArFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/measurement/CustomArFragment.kt" />
              <option name="originalContent" value="package com.paxel.arspacescan.ui.measurement&#10;&#10;import android.content.Context&#10;import com.google.ar.core.Config&#10;import com.google.ar.core.Session&#10;import com.google.ar.sceneform.ux.ArFragment&#10;&#10;class CustomArFragment : ArFragment() {&#10;    &#10;    override fun onAttach(context: Context) {&#10;        super.onAttach(context)&#10;    }&#10;    &#10;    override fun onCreateSessionConfig(session: Session, config: Config) {&#10;        // Disable light estimation to prevent the acquireEnvironmentalHdrCubeMap() crash&#10;        config.lightEstimationMode = Config.LightEstimationMode.DISABLED&#10;        &#10;        // Enable plane detection for measurement&#10;        config.planeFindingMode = Config.PlaneFindingMode.HORIZONTAL_AND_VERTICAL&#10;        &#10;        // Update focus mode for better tracking&#10;        config.updateMode = Config.UpdateMode.LATEST_CAMERA_IMAGE&#10;&#10;        super.onCreateSessionConfig(session, config)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.paxel.arspacescan.ui.measurement&#10;&#10;import android.content.Context&#10;import com.google.ar.core.Config&#10;import com.google.ar.core.Session&#10;import com.google.ar.sceneform.ux.ArFragment&#10;&#10;class CustomArFragment : ArFragment() {&#10;    &#10;    override fun onAttach(context: Context) {&#10;        super.onAttach(context)&#10;    }&#10;    &#10;    override fun onCreateSessionConfig(session: Session): Config {&#10;        val config = super.onCreateSessionConfig(session)&#10;        &#10;        // Disable light estimation to prevent the acquireEnvironmentalHdrCubeMap() crash&#10;        config.lightEstimationMode = Config.LightEstimationMode.DISABLED&#10;        &#10;        // Enable plane detection for measurement&#10;        config.planeFindingMode = Config.PlaneFindingMode.HORIZONTAL_AND_VERTICAL&#10;        &#10;        // Update focus mode for better tracking&#10;        config.updateMode = Config.UpdateMode.LATEST_CAMERA_IMAGE&#10;        &#10;        return config&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/result/MeasurementViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/paxel/arspacescan/ui/result/MeasurementViewModel.kt" />
              <option name="originalContent" value="package com.paxel.arspacescan.ui.result&#10;&#10;import androidx.lifecycle.*&#10;import com.paxel.arspacescan.data.model.PackageMeasurement&#10;import com.paxel.arspacescan.data.repository.MeasurementRepository&#10;import kotlinx.coroutines.launch&#10;&#10;class MeasurementViewModel(private val repository: MeasurementRepository) : ViewModel() {&#10;&#10;    val allMeasurements = repository.allMeasurements.asLiveData()&#10;    private val searchQuery = MutableLiveData&lt;String&gt;(&quot;&quot;)&#10;&#10;    val filteredMeasurements: LiveData&lt;List&lt;PackageMeasurement&gt;&gt; = searchQuery.switchMap { query -&gt;&#10;        if (query.isNullOrEmpty()) {&#10;            repository.allMeasurements.asLiveData()&#10;        } else {&#10;            repository.searchMeasurements(query).asLiveData()&#10;        }&#10;    }&#10;&#10;    fun insert(measurement: PackageMeasurement) = viewModelScope.launch {&#10;        repository.insert(measurement)&#10;    }&#10;&#10;    fun delete(measurement: PackageMeasurement) = viewModelScope.launch {&#10;        repository.delete(measurement)&#10;    }&#10;&#10;    fun setSearchQuery(query: String) {&#10;        searchQuery.value = query&#10;    }&#10;&#10;    suspend fun exportToCSV(): String {&#10;        return repository.exportToCSV()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.paxel.arspacescan.ui.result&#10;&#10;import androidx.lifecycle.*&#10;import com.paxel.arspacescan.data.model.PackageMeasurement&#10;import com.paxel.arspacescan.data.repository.MeasurementRepository&#10;import kotlinx.coroutines.launch&#10;&#10;class MeasurementViewModel(private val repository: MeasurementRepository) : ViewModel() {&#10;&#10;    val allMeasurements = repository.allMeasurements.asLiveData()&#10;    private val searchQuery = MutableLiveData&lt;String&gt;(&quot;&quot;)&#10;&#10;    val filteredMeasurements: LiveData&lt;List&lt;PackageMeasurement&gt;&gt; = searchQuery.switchMap { query -&gt;&#10;        if (query.isNullOrEmpty()) {&#10;            repository.allMeasurements.asLiveData()&#10;        } else {&#10;            repository.searchMeasurements(query).asLiveData()&#10;        }&#10;    }&#10;&#10;    suspend fun insert(measurement: PackageMeasurement): Long {&#10;        return repository.insert(measurement)&#10;    }&#10;&#10;    fun delete(measurement: PackageMeasurement) = viewModelScope.launch {&#10;        repository.delete(measurement)&#10;    }&#10;&#10;    fun setSearchQuery(query: String) {&#10;        searchQuery.value = query&#10;    }&#10;&#10;    suspend fun exportToCSV(): String {&#10;        return repository.exportToCSV()&#10;    }&#10;&#10;    suspend fun getMeasurementById(id: Long): PackageMeasurement? {&#10;        return repository.getMeasurementById(id)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_badge_fail.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_badge_fail.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/red_danger&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/error&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &lt;stroke &#10;        android:width=&quot;0dp&quot; &#10;        android:color=&quot;@color/error_dark&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_badge_neutral.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_badge_neutral.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/text_secondary&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/gray_500&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &lt;stroke &#10;        android:width=&quot;0dp&quot; &#10;        android:color=&quot;@color/gray_600&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_badge_success.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_badge_success.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/green_success&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/success&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &lt;stroke &#10;        android:width=&quot;0dp&quot; &#10;        android:color=&quot;@color/success_dark&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_forward.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_forward.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnPrimary&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,4l-1.41,1.41L16.17,11H4v2h12.17l-5.58,5.59L12,20l8,-8z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_help.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_help.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnPrimary&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM13,19h-2v-2h2v2zM15.07,11.25l-0.9,0.92C13.45,12.9 13,13.5 13,15h-2v-0.5c0,-1.1 0.45,-2.1 1.17,-2.83l1.24,-1.26c0.37,-0.36 0.59,-0.86 0.59,-1.41 0,-1.1 -0.9,-2 -2,-2s-2,0.9 -2,2L8,9c0,-2.21 1.79,-4 4,-4s4,1.79 4,4c0,0.88 -0.36,1.68 -0.93,2.25z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_history.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_history.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnPrimary&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M13,3c-4.97,0 -9,4.03 -9,9L1,12l3.89,3.89 0.07,0.14L9,12L4,12c0,-3.87 3.13,-7 7,-7s7,3.13 7,7 -3.13,7 -7,7c-1.93,0 -3.68,-0.79 -4.94,-2.06l-1.42,1.42C6.27,19.99 9.51,21 13,21c4.97,0 9,-4.03 9,-9s-4.03,-9 -9,-9zM12,8v5l4.28,2.54 0.72,-1.21 -3.5,-2.08L13.5,8L12,8z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnPrimary&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M17.65,6.35C16.2,4.9 14.21,4 12,4c-4.42,0 -7.99,3.58 -7.99,8s3.57,8 7.99,8c3.73,0 6.84,-2.55 7.73,-6h-2.08c-0.82,2.33 -3.04,4 -5.65,4 -3.31,0 -6,-2.69 -6,-6s2.69,-6 6,-6c1.66,0 3.14,0.69 4.22,1.78L13,11h7V4l-2.35,2.35z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_save.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_save.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnPrimary&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M17,3L5,3c-1.11,0 -2,0.9 -2,2v14c0,1.1 0.89,2 2,2h14c1.11,0 2,-0.9 2,-2L21,7l-4,-4zM12,19c-1.66,0 -3,-1.34 -3,-3s1.34,-3 3,-3 3,1.34 3,3 -1.34,3 -3,3zM15,9L5,9L5,5h10v4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_share.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_share.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnPrimary&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M18,16.08c-0.76,0 -1.44,0.3 -1.96,0.77L8.91,12.7c0.05,-0.23 0.09,-0.46 0.09,-0.7s-0.04,-0.47 -0.09,-0.7l7.05,-4.11c0.54,0.5 1.25,0.81 2.04,0.81 1.66,0 3,-1.34 3,-3s-1.34,-3 -3,-3 -3,1.34 -3,3c0,0.24 0.04,0.47 0.09,0.7L8.04,9.81C7.5,9.31 6.79,9 6,9c-1.66,0 -3,1.34 -3,3s1.34,3 3,3c0.79,0 1.50,-0.31 2.04,-0.81l7.12,4.16c-0.05,0.21 -0.08,0.43 -0.08,0.65 0,1.61 1.31,2.92 2.92,2.92 1.61,0 2.92,-1.31 2.92,-2.92s-1.31,-2.92 -2.92,-2.92z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_ar_measurement.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_ar_measurement.xml" />
              <option name="originalContent" value="&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ui.measurement.ARMeasurementActivity&quot;&gt;&#10;&#10;    &lt;androidx.fragment.app.FragmentContainerView&#10;        android:id=&quot;@+id/arFragment&quot;&#10;        android:name=&quot;com.paxel.arspacescan.ui.measurement.CustomArFragment&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot; /&gt;&#10;&#10;    &lt;View&#10;        android:id=&quot;@+id/gridOverlay&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:background=&quot;@drawable/grid_overlay&quot;&#10;        android:alpha=&quot;0.2&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@drawable/bg_gradient_top&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvInstructions&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            tools:text=&quot;Langkah 1/4: Ketuk sudut pertama di alas paket&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/bottom_controls_container&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@drawable/bg_gradient_bottom&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btnUndo&quot;&#10;            style=&quot;@style/Widget.Material3.Button.OutlinedButton.Icon&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;@string/undo&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            app:icon=&quot;@drawable/ic_undo&quot;&#10;            app:iconTint=&quot;@color/white&quot;&#10;            app:strokeColor=&quot;@color/white&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btnReset&quot;&#10;            style=&quot;@style/Widget.Material3.Button.OutlinedButton.Icon&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;@string/reset&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            app:icon=&quot;@drawable/ic_refresh&quot;&#10;            app:iconTint=&quot;@color/white&quot;&#10;            app:strokeColor=&quot;@color/white&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.material.button.MaterialButton&#10;        android:id=&quot;@+id/btnTakePhoto&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.Button.Icon&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:text=&quot;@string/ambil_bukti_foto&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:backgroundTint=&quot;@color/white&quot;&#10;        app:icon=&quot;@drawable/ic_camera&quot;&#10;        app:iconTint=&quot;@color/paxel_red&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/bottom_controls_container&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;    &lt;!-- Tombol Lanjutkan ke Hasil Pengukuran --&gt;&#10;    &lt;com.google.android.material.button.MaterialButton&#10;        android:id=&quot;@+id/btnContinueToResult&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.Button&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;56dp&quot;&#10;        android:layout_marginStart=&quot;16dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:text=&quot;Lanjutkan ke Hasil&quot;&#10;        android:textColor=&quot;@color/white&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:backgroundTint=&quot;@color/paxel_red&quot;&#10;        app:cornerRadius=&quot;8dp&quot;&#10;        app:icon=&quot;@drawable/ic_arrow_forward&quot;&#10;        app:iconTint=&quot;@color/white&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/btnTakePhoto&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cvTrackingHelp&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:cardBackgroundColor=&quot;#CC000000&quot;&#10;        app:cardCornerRadius=&quot;16dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        tools:visibility=&quot;visible&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;24dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:contentDescription=&quot;TODO&quot;&#10;                android:src=&quot;@drawable/ic_move_device&quot;&#10;                app:tint=&quot;@color/white&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:text=&quot;@string/detecting_surface&quot;&#10;                android:textAlignment=&quot;center&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textSize=&quot;16sp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
              <option name="updatedContent" value="&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ui.measurement.ARMeasurementActivity&quot;&gt;&#10;&#10;    &lt;androidx.fragment.app.FragmentContainerView&#10;        android:id=&quot;@+id/arFragment&quot;&#10;        android:name=&quot;com.paxel.arspacescan.ui.measurement.CustomArFragment&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot; /&gt;&#10;&#10;    &lt;View&#10;        android:id=&quot;@+id/gridOverlay&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:background=&quot;@drawable/grid_overlay&quot;&#10;        android:alpha=&quot;0.2&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@drawable/bg_gradient_top&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvInstructions&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            tools:text=&quot;Langkah 1/4: Ketuk sudut pertama di alas paket&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/bottom_controls_container&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@drawable/bg_gradient_bottom&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btnUndo&quot;&#10;            style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton.Icon&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;@string/undo&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            app:icon=&quot;@drawable/ic_undo&quot;&#10;            app:iconTint=&quot;@color/white&quot;&#10;            app:strokeColor=&quot;@color/white&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btnReset&quot;&#10;            style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton.Icon&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;@string/reset&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            app:icon=&quot;@drawable/ic_refresh&quot;&#10;            app:iconTint=&quot;@color/white&quot;&#10;            app:strokeColor=&quot;@color/white&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.material.button.MaterialButton&#10;        android:id=&quot;@+id/btnTakePhoto&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.Button.Icon&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:text=&quot;@string/ambil_bukti_foto&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:backgroundTint=&quot;@color/white&quot;&#10;        app:icon=&quot;@drawable/ic_camera&quot;&#10;        app:iconTint=&quot;@color/paxel_red&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/bottom_controls_container&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;    &lt;!-- Tombol Lanjutkan ke Hasil Pengukuran --&gt;&#10;    &lt;com.google.android.material.button.MaterialButton&#10;        android:id=&quot;@+id/btnContinueToResult&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.Button&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;56dp&quot;&#10;        android:layout_marginStart=&quot;16dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:text=&quot;Lanjutkan ke Hasil&quot;&#10;        android:textColor=&quot;@color/white&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:backgroundTint=&quot;@color/paxel_red&quot;&#10;        app:cornerRadius=&quot;8dp&quot;&#10;        app:icon=&quot;@drawable/ic_arrow_forward&quot;&#10;        app:iconTint=&quot;@color/white&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/btnTakePhoto&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cvTrackingHelp&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:cardBackgroundColor=&quot;#CC000000&quot;&#10;        app:cardCornerRadius=&quot;16dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        tools:visibility=&quot;visible&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;24dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:contentDescription=&quot;TODO&quot;&#10;                android:src=&quot;@drawable/ic_move_device&quot;&#10;                app:tint=&quot;@color/white&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:text=&quot;@string/detecting_surface&quot;&#10;                android:textAlignment=&quot;center&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textSize=&quot;16sp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/white&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/ivMainLogo&quot;&#10;        android:layout_width=&quot;120dp&quot;&#10;        android:layout_height=&quot;120dp&quot;&#10;        android:layout_marginTop=&quot;80dp&quot;&#10;        android:src=&quot;@mipmap/ic_paxel_logo&quot;&#10;        android:contentDescription=&quot;@string/main_title&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvMainTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;24dp&quot;&#10;        android:text=&quot;@string/app_name&quot;&#10;        android:textColor=&quot;@color/text_primary&quot;&#10;        android:textSize=&quot;28sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/ivMainLogo&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvSubtitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:text=&quot;@string/subtitle&quot;&#10;        android:textColor=&quot;@color/text_secondary&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/tvMainTitle&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/btnStartMeasurement&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;32dp&quot;&#10;        android:layout_marginEnd=&quot;32dp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:foreground=&quot;?attr/selectableItemBackground&quot;&#10;        app:cardBackgroundColor=&quot;@color/paxel_red&quot;&#10;        app:cardCornerRadius=&quot;12dp&quot;&#10;        app:cardElevation=&quot;4dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/btnHistory&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:paddingHorizontal=&quot;24dp&quot;&#10;            android:paddingVertical=&quot;16dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:contentDescription=&quot;@string/start_measurement&quot;&#10;                android:src=&quot;@drawable/ic_camera&quot;&#10;                app:tint=&quot;@color/white&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;&#10;                android:text=&quot;@string/start_measurement&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/btnHistory&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;32dp&quot;&#10;        android:layout_marginEnd=&quot;32dp&quot;&#10;        android:layout_marginBottom=&quot;80dp&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:foreground=&quot;?attr/selectableItemBackground&quot;&#10;        app:cardBackgroundColor=&quot;@color/white&quot;&#10;        app:cardCornerRadius=&quot;12dp&quot;&#10;        app:cardElevation=&quot;4dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:strokeColor=&quot;@color/paxel_red&quot;&#10;        app:strokeWidth=&quot;2dp&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:paddingHorizontal=&quot;24dp&quot;&#10;            android:paddingVertical=&quot;16dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;24dp&quot;&#10;                android:layout_height=&quot;24dp&quot;&#10;                android:src=&quot;@drawable/ic_history&quot;&#10;                android:contentDescription=&quot;@string/history&quot;&#10;                app:tint=&quot;@color/paxel_red&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;&#10;                android:text=&quot;@string/history&quot;&#10;                android:textColor=&quot;@color/paxel_red&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background_secondary&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;!-- App Logo --&gt;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/ivMainLogo&quot;&#10;        android:layout_width=&quot;140dp&quot;&#10;        android:layout_height=&quot;140dp&quot;&#10;        android:layout_marginTop=&quot;60dp&quot;&#10;        android:src=&quot;@mipmap/ic_paxel_logo&quot;&#10;        android:contentDescription=&quot;@string/main_title&quot;&#10;        android:elevation=&quot;4dp&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;!-- Main Title --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvMainTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;32dp&quot;&#10;        android:text=&quot;@string/app_name&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Headline1&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:letterSpacing=&quot;0.02&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/ivMainLogo&quot; /&gt;&#10;&#10;    &lt;!-- Subtitle --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvSubtitle&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;12dp&quot;&#10;        android:layout_marginStart=&quot;32dp&quot;&#10;        android:layout_marginEnd=&quot;32dp&quot;&#10;        android:text=&quot;@string/subtitle&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Body1&quot;&#10;        android:textColor=&quot;@color/text_secondary&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:lineSpacingExtra=&quot;4dp&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/tvMainTitle&quot; /&gt;&#10;&#10;    &lt;!-- Action Buttons Container --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:layout_marginTop=&quot;48dp&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/tvSubtitle&quot;&gt;&#10;&#10;        &lt;!-- Start Measurement Button --&gt;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btnStartMeasurement&quot;&#10;            style=&quot;@style/Widget.PaxelAR.Button&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:text=&quot;@string/start_measurement&quot;&#10;            android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Button&quot;&#10;            app:icon=&quot;@drawable/ic_camera&quot;&#10;            app:iconGravity=&quot;start&quot;&#10;            app:iconPadding=&quot;16dp&quot;&#10;            app:iconTint=&quot;@color/white&quot;&#10;            android:elevation=&quot;8dp&quot;&#10;            app:backgroundTint=&quot;@color/paxel_primary&quot; /&gt;&#10;&#10;        &lt;!-- History Button --&gt;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btnHistory&quot;&#10;            style=&quot;@style/Widget.PaxelAR.Button.Outlined&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:text=&quot;@string/view_history&quot;&#10;            android:textColor=&quot;@color/paxel_primary&quot;&#10;            app:icon=&quot;@drawable/ic_history&quot;&#10;            app:iconGravity=&quot;start&quot;&#10;            app:iconPadding=&quot;16dp&quot;&#10;            app:iconTint=&quot;@color/paxel_primary&quot;&#10;            app:strokeColor=&quot;@color/paxel_primary&quot;&#10;            app:strokeWidth=&quot;2dp&quot; /&gt;&#10;&#10;        &lt;!-- App Version Info --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvVersionInfo&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:text=&quot;@string/version_info&quot;&#10;            android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Caption&quot;&#10;            android:alpha=&quot;0.7&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_result.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_result.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;#F5F5F5&quot;&#10;    tools:context=&quot;.ui.result.ResultActivity&quot;&gt;&#10;&#10;    &lt;!-- Toolbar --&gt;&#10;    &lt;com.google.android.material.appbar.MaterialToolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        android:background=&quot;@color/paxel_red&quot;&#10;        android:theme=&quot;@style/ThemeOverlay.MaterialComponents.Dark.ActionBar&quot;&#10;        app:title=&quot;Hasil Pengukuran&quot;&#10;        app:titleTextColor=&quot;@color/white&quot;&#10;        app:navigationIcon=&quot;?attr/homeAsUpIndicator&quot; /&gt;&#10;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;        &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:paddingBottom=&quot;24dp&quot;&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardHeader&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:layout_marginEnd=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;20dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Hasil Pengukuran&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:textSize=&quot;22sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvPackageName&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;8dp&quot;&#10;                        android:textColor=&quot;@color/paxel_red&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        tools:text=&quot;Paket Macbook Pro&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvTimestamp&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:textColor=&quot;@color/text_secondary&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        tools:text=&quot;08 Agu 2025, 19:53&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardDimensions&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;@+id/cardHeader&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;@+id/cardHeader&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/cardHeader&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;20dp&quot;&gt;&#10;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowPanjang&quot;/&gt;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowLebar&quot;/&gt;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowTinggi&quot;/&gt;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowKategori&quot;/&gt;&#10;                    &lt;View&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;1dp&quot;&#10;                        android:background=&quot;#E0E0E0&quot;&#10;                        android:layout_marginVertical=&quot;16dp&quot;/&gt;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowDeklarasi&quot;/&gt;&#10;                    &lt;include layout=&quot;@layout/item_result_row_badge&quot;&#10;                        android:id=&quot;@+id/rowValidasi&quot;/&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardVolume&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;@+id/cardDimensions&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;@+id/cardDimensions&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/cardDimensions&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;20dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Kalkulasi&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowVolume&quot;/&gt;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowBerat&quot;/&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:layout_marginTop=&quot;24dp&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/cardVolume&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;@id/cardVolume&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;@id/cardVolume&quot;&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnSave&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;56dp&quot;&#10;                    android:text=&quot;Simpan Pengukuran&quot;&#10;                    android:backgroundTint=&quot;@color/paxel_red&quot;&#10;                    app:cornerRadius=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnNewMeasurement&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;56dp&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&#10;                    android:text=&quot;Pengukuran Baru&quot;&#10;                    app:strokeColor=&quot;@color/paxel_red&quot;&#10;                    app:strokeWidth=&quot;2dp&quot;&#10;                    android:backgroundTint=&quot;@color/white&quot;&#10;                    android:textColor=&quot;@color/paxel_red&quot;&#10;                    app:cornerRadius=&quot;8dp&quot;/&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnViewHistory&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;56dp&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&#10;                    android:text=&quot;Lihat Riwayat&quot;&#10;                    android:textColor=&quot;@color/text_primary&quot;&#10;                    android:backgroundTint=&quot;@color/white&quot;&#10;                    app:strokeColor=&quot;@color/text_secondary&quot;&#10;                    app:strokeWidth=&quot;1dp&quot;&#10;                    app:cornerRadius=&quot;8dp&quot;&#10;                    app:icon=&quot;@drawable/ic_history&quot;&#10;                    app:iconTint=&quot;@color/text_primary&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;&#10;        &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;    &lt;/ScrollView&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@color/background_secondary&quot;&#10;    tools:context=&quot;.ui.result.ResultActivity&quot;&gt;&#10;&#10;    &lt;!-- Toolbar --&gt;&#10;    &lt;com.google.android.material.appbar.MaterialToolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        style=&quot;@style/Widget.PaxelAR.Toolbar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        app:title=&quot;Hasil Pengukuran&quot;&#10;        app:titleTextColor=&quot;@color/white&quot;&#10;        app:navigationIcon=&quot;?attr/homeAsUpIndicator&quot; /&gt;&#10;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:fillViewport=&quot;true&quot;&gt;&#10;&#10;        &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:paddingBottom=&quot;32dp&quot;&gt;&#10;&#10;            &lt;!-- Header Card --&gt;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardHeader&quot;&#10;                style=&quot;@style/Widget.PaxelAR.CardView&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;20dp&quot;&#10;                android:layout_marginTop=&quot;20dp&quot;&#10;                android:layout_marginEnd=&quot;20dp&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Hasil Pengukuran&quot;&#10;                        android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Title&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvPackageName&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Subtitle&quot;&#10;                        android:layout_marginBottom=&quot;4dp&quot;&#10;                        tools:text=&quot;Paket Macbook Pro&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvTimestamp&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Caption&quot;&#10;                        tools:text=&quot;08 Agu 2025, 19:53&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- Dimensions Card --&gt;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardDimensions&quot;&#10;                style=&quot;@style/Widget.PaxelAR.CardView&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;20dp&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:layout_marginEnd=&quot;20dp&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/cardHeader&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Dimensi &amp;amp; Validasi&quot;&#10;                        android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Title&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowPanjang&quot;/&gt;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowLebar&quot;/&gt;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowTinggi&quot;/&gt;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowKategori&quot;/&gt;&#10;&#10;                    &lt;View&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;1dp&quot;&#10;                        android:background=&quot;@color/border_primary&quot;&#10;                        android:layout_marginVertical=&quot;20dp&quot;/&gt;&#10;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowDeklarasi&quot;/&gt;&#10;                    &lt;include layout=&quot;@layout/item_result_row_badge&quot;&#10;                        android:id=&quot;@+id/rowValidasi&quot;/&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- Calculations Card --&gt;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardVolume&quot;&#10;                style=&quot;@style/Widget.PaxelAR.CardView&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;20dp&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:layout_marginEnd=&quot;20dp&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/cardDimensions&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Kalkulasi&quot;&#10;                        android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Title&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowVolume&quot;/&gt;&#10;                    &lt;include layout=&quot;@layout/item_result_row&quot;&#10;                        android:id=&quot;@+id/rowBerat&quot;/&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- Action Buttons --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:layout_marginStart=&quot;20dp&quot;&#10;                android:layout_marginEnd=&quot;20dp&quot;&#10;                android:layout_marginTop=&quot;24dp&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/cardVolume&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnSave&quot;&#10;                    style=&quot;@style/Widget.PaxelAR.Button&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&#10;                    android:text=&quot;Simpan Pengukuran&quot;&#10;                    app:icon=&quot;@drawable/ic_save&quot;&#10;                    app:iconGravity=&quot;start&quot;&#10;                    app:iconPadding=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnNewMeasurement&quot;&#10;                    style=&quot;@style/Widget.PaxelAR.Button.Outlined&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&#10;                    android:text=&quot;Pengukuran Baru&quot;&#10;                    app:icon=&quot;@drawable/ic_refresh&quot;&#10;                    app:iconGravity=&quot;start&quot;&#10;                    app:iconPadding=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnViewHistory&quot;&#10;                    style=&quot;@style/Widget.PaxelAR.Button.Text&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Lihat Riwayat&quot;&#10;                    app:icon=&quot;@drawable/ic_history&quot;&#10;                    app:iconGravity=&quot;start&quot;&#10;                    app:iconPadding=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;    &lt;/ScrollView&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_result_row.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_result_row.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:paddingVertical=&quot;8dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvLabel&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:textColor=&quot;@color/text_secondary&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        tools:text=&quot;Label&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvValue&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textColor=&quot;@color/text_primary&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        tools:text=&quot;Value&quot; /&gt;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:gravity=&quot;center_vertical&quot;&#10;    android:paddingVertical=&quot;12dp&quot;&#10;    android:minHeight=&quot;48dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvLabel&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Label&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        tools:text=&quot;Label&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvValue&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Value&quot;&#10;        android:textAlignment=&quot;textEnd&quot;&#10;        tools:text=&quot;Value&quot; /&gt;&#10;        &#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_result_row_badge.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_result_row_badge.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:gravity=&quot;center_vertical&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:paddingVertical=&quot;8dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvLabel&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:textColor=&quot;@color/text_secondary&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        tools:text=&quot;Label&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvValue&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@drawable/bg_badge_neutral&quot;&#10;        android:paddingHorizontal=&quot;12dp&quot;&#10;        android:paddingVertical=&quot;4dp&quot;&#10;        android:textColor=&quot;@color/white&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        tools:text=&quot;Value&quot; /&gt;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:gravity=&quot;center_vertical&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:paddingVertical=&quot;12dp&quot;&#10;    android:minHeight=&quot;48dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvLabel&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.PaxelAR.Label&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        tools:text=&quot;Label&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvValue&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@drawable/bg_badge_neutral&quot;&#10;        android:paddingHorizontal=&quot;16dp&quot;&#10;        android:paddingVertical=&quot;8dp&quot;&#10;        android:textColor=&quot;@color/white&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textAlignment=&quot;center&quot;&#10;        android:minWidth=&quot;80dp&quot;&#10;        tools:text=&quot;Value&quot; /&gt;&#10;        &#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/menu_result.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/menu_result.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_history&quot;&#10;        android:icon=&quot;@drawable/ic_history&quot;&#10;        android:title=&quot;Riwayat&quot;&#10;        app:showAsAction=&quot;ifRoom&quot; /&gt;&#10;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_share&quot;&#10;        android:icon=&quot;@drawable/ic_share&quot;&#10;        android:title=&quot;Bagikan&quot;&#10;        app:showAsAction=&quot;ifRoom&quot; /&gt;&#10;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_help&quot;&#10;        android:icon=&quot;@drawable/ic_help&quot;&#10;        android:title=&quot;Bantuan&quot;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#10;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;paxel_red&quot;&gt;#FF0000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;#333333&lt;/color&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;#666666&lt;/color&gt;&#10;    &lt;color name=&quot;background_light&quot;&gt;#F5F5F5&lt;/color&gt;&#10;    &lt;color name=&quot;success&quot;&gt;#4CAF50&lt;/color&gt;&#10;    &lt;color name=&quot;error&quot;&gt;#F44336&lt;/color&gt;&#10;    &lt;color name=&quot;warning&quot;&gt;#FF9800&lt;/color&gt;&#10;    &lt;color name=&quot;green_success&quot;&gt;#28A745&lt;/color&gt;&#10;    &lt;color name=&quot;blue_info&quot;&gt;#17A2B8&lt;/color&gt;&#10;    &lt;color name=&quot;orange_warning&quot;&gt;#FFC107&lt;/color&gt;&#10;    &lt;color name=&quot;red_danger&quot;&gt;#DC3545&lt;/color&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Primary Paxel Brand Colors --&gt;&#10;    &lt;color name=&quot;paxel_primary&quot;&gt;#E53E3E&lt;/color&gt;&#10;    &lt;color name=&quot;paxel_primary_dark&quot;&gt;#C53030&lt;/color&gt;&#10;    &lt;color name=&quot;paxel_primary_light&quot;&gt;#FEB2B2&lt;/color&gt;&#10;    &lt;color name=&quot;paxel_accent&quot;&gt;#FF6B6B&lt;/color&gt;&#10;    &#10;    &lt;!-- Legacy color for backward compatibility --&gt;&#10;    &lt;color name=&quot;paxel_red&quot;&gt;@color/paxel_primary&lt;/color&gt;&#10;    &#10;    &lt;!-- Neutral Colors --&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;gray_50&quot;&gt;#F9FAFB&lt;/color&gt;&#10;    &lt;color name=&quot;gray_100&quot;&gt;#F3F4F6&lt;/color&gt;&#10;    &lt;color name=&quot;gray_200&quot;&gt;#E5E7EB&lt;/color&gt;&#10;    &lt;color name=&quot;gray_300&quot;&gt;#D1D5DB&lt;/color&gt;&#10;    &lt;color name=&quot;gray_400&quot;&gt;#9CA3AF&lt;/color&gt;&#10;    &lt;color name=&quot;gray_500&quot;&gt;#6B7280&lt;/color&gt;&#10;    &lt;color name=&quot;gray_600&quot;&gt;#4B5563&lt;/color&gt;&#10;    &lt;color name=&quot;gray_700&quot;&gt;#374151&lt;/color&gt;&#10;    &lt;color name=&quot;gray_800&quot;&gt;#1F2937&lt;/color&gt;&#10;    &lt;color name=&quot;gray_900&quot;&gt;#111827&lt;/color&gt;&#10;    &#10;    &lt;!-- Text Colors --&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;@color/gray_900&lt;/color&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;@color/gray_600&lt;/color&gt;&#10;    &lt;color name=&quot;text_tertiary&quot;&gt;@color/gray_500&lt;/color&gt;&#10;    &lt;color name=&quot;text_disabled&quot;&gt;@color/gray_400&lt;/color&gt;&#10;    &#10;    &lt;!-- Background Colors --&gt;&#10;    &lt;color name=&quot;background_primary&quot;&gt;@color/white&lt;/color&gt;&#10;    &lt;color name=&quot;background_secondary&quot;&gt;@color/gray_50&lt;/color&gt;&#10;    &lt;color name=&quot;background_tertiary&quot;&gt;@color/gray_100&lt;/color&gt;&#10;    &lt;color name=&quot;background_light&quot;&gt;@color/gray_50&lt;/color&gt;&#10;    &#10;    &lt;!-- Surface Colors --&gt;&#10;    &lt;color name=&quot;surface_primary&quot;&gt;@color/white&lt;/color&gt;&#10;    &lt;color name=&quot;surface_elevated&quot;&gt;@color/white&lt;/color&gt;&#10;    &lt;color name=&quot;surface_overlay&quot;&gt;@color/white&lt;/color&gt;&#10;    &#10;    &lt;!-- Status Colors --&gt;&#10;    &lt;color name=&quot;success&quot;&gt;#22C55E&lt;/color&gt;&#10;    &lt;color name=&quot;success_light&quot;&gt;#DCFCE7&lt;/color&gt;&#10;    &lt;color name=&quot;success_dark&quot;&gt;#16A34A&lt;/color&gt;&#10;    &lt;color name=&quot;green_success&quot;&gt;@color/success&lt;/color&gt;&#10;    &#10;    &lt;color name=&quot;warning&quot;&gt;#F59E0B&lt;/color&gt;&#10;    &lt;color name=&quot;warning_light&quot;&gt;#FEF3C7&lt;/color&gt;&#10;    &lt;color name=&quot;warning_dark&quot;&gt;#D97706&lt;/color&gt;&#10;    &lt;color name=&quot;orange_warning&quot;&gt;@color/warning&lt;/color&gt;&#10;    &#10;    &lt;color name=&quot;error&quot;&gt;#EF4444&lt;/color&gt;&#10;    &lt;color name=&quot;error_light&quot;&gt;#FEE2E2&lt;/color&gt;&#10;    &lt;color name=&quot;error_dark&quot;&gt;#DC2626&lt;/color&gt;&#10;    &lt;color name=&quot;red_danger&quot;&gt;@color/error&lt;/color&gt;&#10;    &#10;    &lt;color name=&quot;info&quot;&gt;#3B82F6&lt;/color&gt;&#10;    &lt;color name=&quot;info_light&quot;&gt;#DBEAFE&lt;/color&gt;&#10;    &lt;color name=&quot;info_dark&quot;&gt;#2563EB&lt;/color&gt;&#10;    &lt;color name=&quot;blue_info&quot;&gt;@color/info&lt;/color&gt;&#10;    &#10;    &lt;!-- Border Colors --&gt;&#10;    &lt;color name=&quot;border_primary&quot;&gt;@color/gray_200&lt;/color&gt;&#10;    &lt;color name=&quot;border_secondary&quot;&gt;@color/gray_300&lt;/color&gt;&#10;    &lt;color name=&quot;border_focus&quot;&gt;@color/paxel_primary&lt;/color&gt;&#10;    &#10;    &lt;!-- Overlay Colors --&gt;&#10;    &lt;color name=&quot;overlay_light&quot;&gt;#80FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;overlay_dark&quot;&gt;#80000000&lt;/color&gt;&#10;    &lt;color name=&quot;scrim&quot;&gt;#52000000&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Paxel AR SpaceScan&lt;/string&gt;&#10;&#10;    &lt;!-- Home Screen --&gt;&#10;    &lt;string name=&quot;main_title&quot;&gt;Paxel AR SpaceScan&lt;/string&gt;&#10;    &lt;string name=&quot;subtitle&quot;&gt;Pengukuran Paket dengan AR&lt;/string&gt;&#10;    &lt;string name=&quot;start_measurement&quot;&gt;Mulai Pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;history&quot;&gt;Riwayat Pengukuran&lt;/string&gt;&#10;&#10;    &lt;!-- Instructions --&gt;&#10;    &lt;!-- Instructions --&gt;&#10;    &lt;string name=&quot;instruction_step_1&quot;&gt;Langkah 1/3: Ketuk sudut pertama di alas paket&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_step_2&quot;&gt;Langkah 2/3: Ketuk sudut diagonal yang berlawanan&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_step_3&quot;&gt;Langkah 3/3: Arahkan ke atas &amp;amp; ketuk untuk konfirmasi tinggi&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_completed&quot;&gt;Pengukuran selesai. Tekan &quot;Kembali&quot; untuk melihat hasil.&lt;/string&gt;&#10;&#10;&#10;&#10;    &lt;!-- Dialogs &amp; Buttons --&gt;&#10;    &lt;string name=&quot;package_name_title&quot;&gt;Masukkan Data Paket&lt;/string&gt;&#10;    &lt;string name=&quot;ok&quot;&gt;OK&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Batal&lt;/string&gt;&#10;    &lt;string name=&quot;undo&quot;&gt;Ulangi&lt;/string&gt;&#10;    &lt;string name=&quot;reset&quot;&gt;Reset&lt;/string&gt;&#10;    &lt;string name=&quot;save_measurement&quot;&gt;Simpan Pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;saved&quot;&gt;Tersimpan&lt;/string&gt;&#10;    &lt;string name=&quot;new_measurement&quot;&gt;Pengukuran Baru&lt;/string&gt;&#10;    &lt;string name=&quot;default_package_name&quot;&gt;Paket Tanpa Nama&lt;/string&gt;&#10;    &lt;string name=&quot;yes&quot;&gt;Ya&lt;/string&gt;&#10;    &lt;string name=&quot;no&quot;&gt;Tidak&lt;/string&gt;&#10;&#10;    &lt;!-- Results --&gt;&#10;    &lt;string name=&quot;measurement_results&quot;&gt;Hasil Pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;dimensions&quot;&gt;Dimensi&lt;/string&gt;&#10;    &lt;string name=&quot;length&quot;&gt;Panjang&lt;/string&gt;&#10;    &lt;string name=&quot;width&quot;&gt;Lebar&lt;/string&gt;&#10;    &lt;string name=&quot;height&quot;&gt;Tinggi&lt;/string&gt;&#10;    &lt;string name=&quot;calculations&quot;&gt;Kalkulasi&lt;/string&gt;&#10;    &lt;string name=&quot;volume&quot;&gt;Volume&lt;/string&gt;&#10;    &lt;string name=&quot;volumetric_weight&quot;&gt;Berat Volumetrik&lt;/string&gt;&#10;&#10;    &lt;!-- History --&gt;&#10;    &lt;string name=&quot;measurement_history&quot;&gt;Riwayat Pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;no_measurements&quot;&gt;Belum ada pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;search_hint&quot;&gt;Cari nama paket...&lt;/string&gt;&#10;    &lt;string name=&quot;export_csv&quot;&gt;Ekspor CSV&lt;/string&gt;&#10;    &lt;string name=&quot;delete_all&quot;&gt;Hapus Semua&lt;/string&gt;&#10;&#10;    &lt;!-- AR &amp; Permissions --&gt;&#10;    &lt;string name=&quot;detecting_surface&quot;&gt;Gerakkan perangkat untuk mendeteksi permukaan&lt;/string&gt;&#10;    &lt;string name=&quot;ambil_bukti_foto&quot;&gt;Ambil Foto&lt;/string&gt;&#10;&#10;    &lt;!-- Additional UI Strings --&gt;&#10;    &lt;string name=&quot;view_history&quot;&gt;Lihat Riwayat&lt;/string&gt;&#10;    &lt;string name=&quot;version_info&quot;&gt;Versi 1.0&lt;/string&gt;&#10;&#10;    &lt;!-- Content Descriptions --&gt;&#10;    &lt;string name=&quot;camera_icon&quot;&gt;Ikon Kamera&lt;/string&gt;&#10;    &lt;string name=&quot;history_icon&quot;&gt;Ikon Riwayat&lt;/string&gt;&#10;    &lt;string name=&quot;logo_description&quot;&gt;Logo Paxel&lt;/string&gt;&#10;&#10;    &lt;!-- Spinner Options --&gt;&#10;    &lt;string-array name=&quot;package_sizes&quot;&gt;&#10;        &lt;item&gt;Pilih Ukuran Deklarasi&lt;/item&gt;&#10;        &lt;item&gt;Small&lt;/item&gt;&#10;        &lt;item&gt;Medium&lt;/item&gt;&#10;        &lt;item&gt;Large&lt;/item&gt;&#10;    &lt;/string-array&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Paxel AR SpaceScan&lt;/string&gt;&#10;&#10;    &lt;!-- Home Screen --&gt;&#10;    &lt;string name=&quot;main_title&quot;&gt;Paxel AR SpaceScan&lt;/string&gt;&#10;    &lt;string name=&quot;subtitle&quot;&gt;Pengukuran Paket dengan AR&lt;/string&gt;&#10;    &lt;string name=&quot;start_measurement&quot;&gt;Mulai Pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;history&quot;&gt;Riwayat Pengukuran&lt;/string&gt;&#10;&#10;    &lt;!-- Instructions --&gt;&#10;    &lt;!-- Instructions --&gt;&#10;    &lt;string name=&quot;instruction_step_1&quot;&gt;Langkah 1/3: Ketuk sudut pertama di alas paket&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_step_2&quot;&gt;Langkah 2/3: Ketuk sudut diagonal yang berlawanan&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_step_3&quot;&gt;Langkah 3/3: Arahkan ke atas &amp;amp; ketuk untuk konfirmasi tinggi&lt;/string&gt;&#10;    &lt;string name=&quot;instruction_completed&quot;&gt;Pengukuran selesai. Tekan &quot;Kembali&quot; untuk melihat hasil.&lt;/string&gt;&#10;&#10;&#10;&#10;    &lt;!-- Dialogs &amp; Buttons --&gt;&#10;    &lt;string name=&quot;package_name_title&quot;&gt;Masukkan Data Paket&lt;/string&gt;&#10;    &lt;string name=&quot;select_declared_size_prompt&quot;&gt;Pilih ukuran deklarasi paket&lt;/string&gt;&#10;    &lt;string name=&quot;ok&quot;&gt;OK&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Batal&lt;/string&gt;&#10;    &lt;string name=&quot;undo&quot;&gt;Ulangi&lt;/string&gt;&#10;    &lt;string name=&quot;reset&quot;&gt;Reset&lt;/string&gt;&#10;    &lt;string name=&quot;save_measurement&quot;&gt;Simpan Pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;saved&quot;&gt;Tersimpan&lt;/string&gt;&#10;    &lt;string name=&quot;new_measurement&quot;&gt;Pengukuran Baru&lt;/string&gt;&#10;    &lt;string name=&quot;default_package_name&quot;&gt;Paket Tanpa Nama&lt;/string&gt;&#10;    &lt;string name=&quot;yes&quot;&gt;Ya&lt;/string&gt;&#10;    &lt;string name=&quot;no&quot;&gt;Tidak&lt;/string&gt;&#10;&#10;    &lt;!-- Results --&gt;&#10;    &lt;string name=&quot;measurement_results&quot;&gt;Hasil Pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;dimensions&quot;&gt;Dimensi&lt;/string&gt;&#10;    &lt;string name=&quot;length&quot;&gt;Panjang&lt;/string&gt;&#10;    &lt;string name=&quot;width&quot;&gt;Lebar&lt;/string&gt;&#10;    &lt;string name=&quot;height&quot;&gt;Tinggi&lt;/string&gt;&#10;    &lt;string name=&quot;calculations&quot;&gt;Kalkulasi&lt;/string&gt;&#10;    &lt;string name=&quot;volume&quot;&gt;Volume&lt;/string&gt;&#10;    &lt;string name=&quot;volumetric_weight&quot;&gt;Berat Volumetrik&lt;/string&gt;&#10;&#10;    &lt;!-- History --&gt;&#10;    &lt;string name=&quot;measurement_history&quot;&gt;Riwayat Pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;no_measurements&quot;&gt;Belum ada pengukuran&lt;/string&gt;&#10;    &lt;string name=&quot;search_hint&quot;&gt;Cari nama paket...&lt;/string&gt;&#10;    &lt;string name=&quot;export_csv&quot;&gt;Ekspor CSV&lt;/string&gt;&#10;    &lt;string name=&quot;delete_all&quot;&gt;Hapus Semua&lt;/string&gt;&#10;&#10;    &lt;!-- AR &amp; Permissions --&gt;&#10;    &lt;string name=&quot;detecting_surface&quot;&gt;Gerakkan perangkat untuk mendeteksi permukaan&lt;/string&gt;&#10;    &lt;string name=&quot;ambil_bukti_foto&quot;&gt;Ambil Foto&lt;/string&gt;&#10;&#10;    &lt;!-- Additional UI Strings --&gt;&#10;    &lt;string name=&quot;view_history&quot;&gt;Lihat Riwayat&lt;/string&gt;&#10;    &lt;string name=&quot;version_info&quot;&gt;Versi 1.0&lt;/string&gt;&#10;&#10;    &lt;!-- Content Descriptions --&gt;&#10;    &lt;string name=&quot;camera_icon&quot;&gt;Ikon Kamera&lt;/string&gt;&#10;    &lt;string name=&quot;history_icon&quot;&gt;Ikon Riwayat&lt;/string&gt;&#10;    &lt;string name=&quot;logo_description&quot;&gt;Logo Paxel&lt;/string&gt;&#10;&#10;    &lt;!-- Spinner Options --&gt;&#10;    &lt;string-array name=&quot;package_sizes&quot;&gt;&#10;        &lt;item&gt;Pilih Ukuran Deklarasi&lt;/item&gt;&#10;        &lt;item&gt;Small&lt;/item&gt;&#10;        &lt;item&gt;Medium&lt;/item&gt;&#10;        &lt;item&gt;Large&lt;/item&gt;&#10;    &lt;/string-array&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/styles.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/styles.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Button Styles --&gt;&#10;    &lt;style name=&quot;Widget.PaxelAR.Button&quot; parent=&quot;Widget.Material3.Button&quot;&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;56dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingTop&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingBottom&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;cornerRadius&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textAppearance&quot;&gt;@style/TextAppearance.PaxelAR.Button&lt;/item&gt;&#10;        &lt;item name=&quot;backgroundTint&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:elevation&quot;&gt;2dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:stateListAnimator&quot;&gt;@null&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.PaxelAR.Button.Outlined&quot; parent=&quot;Widget.Material3.Button.OutlinedButton&quot;&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;56dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingTop&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingBottom&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;cornerRadius&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;strokeColor&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;        &lt;item name=&quot;strokeWidth&quot;&gt;2dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.PaxelAR.Button.Text&quot; parent=&quot;Widget.Material3.Button.TextButton&quot;&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;48dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;cornerRadius&quot;&gt;8dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Card Styles --&gt;&#10;    &lt;style name=&quot;Widget.PaxelAR.CardView&quot; parent=&quot;Widget.Material3.CardView.Elevated&quot;&gt;&#10;        &lt;item name=&quot;cardCornerRadius&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;cardElevation&quot;&gt;4dp&lt;/item&gt;&#10;        &lt;item name=&quot;cardBackgroundColor&quot;&gt;@color/surface_primary&lt;/item&gt;&#10;        &lt;item name=&quot;contentPadding&quot;&gt;20dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_margin&quot;&gt;16dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.PaxelAR.CardView.Compact&quot; parent=&quot;Widget.PaxelAR.CardView&quot;&gt;&#10;        &lt;item name=&quot;cardCornerRadius&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;cardElevation&quot;&gt;2dp&lt;/item&gt;&#10;        &lt;item name=&quot;contentPadding&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_margin&quot;&gt;8dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- TextInput Styles --&gt;&#10;    &lt;style name=&quot;Widget.PaxelAR.TextInputLayout&quot; parent=&quot;Widget.Material3.TextInputLayout.OutlinedBox&quot;&gt;&#10;        &lt;item name=&quot;boxCornerRadiusTopStart&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;boxCornerRadiusTopEnd&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;boxCornerRadiusBottomStart&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;boxCornerRadiusBottomEnd&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;boxStrokeColor&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;        &lt;item name=&quot;hintTextColor&quot;&gt;@color/text_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorHint&quot;&gt;@color/text_secondary&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Toolbar Styles --&gt;&#10;    &lt;style name=&quot;Widget.PaxelAR.Toolbar&quot; parent=&quot;Widget.Material3.Toolbar&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;        &lt;item name=&quot;titleTextColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;subtitleTextColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:theme&quot;&gt;@style/ThemeOverlay.Material3.Dark&lt;/item&gt;&#10;        &lt;item name=&quot;popupTheme&quot;&gt;@style/ThemeOverlay.Material3.Light&lt;/item&gt;&#10;        &lt;item name=&quot;android:elevation&quot;&gt;4dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Typography for specific use cases --&gt;&#10;    &lt;style name=&quot;TextAppearance.PaxelAR.Title&quot; parent=&quot;TextAppearance.Material3.TitleLarge&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;22sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/text_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;        &lt;item name=&quot;android:lineSpacingExtra&quot;&gt;4dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TextAppearance.PaxelAR.Subtitle&quot; parent=&quot;TextAppearance.Material3.TitleMedium&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;18sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TextAppearance.PaxelAR.Caption&quot; parent=&quot;TextAppearance.Material3.BodySmall&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;12sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/text_tertiary&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TextAppearance.PaxelAR.Label&quot; parent=&quot;TextAppearance.Material3.LabelMedium&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/text_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TextAppearance.PaxelAR.Value&quot; parent=&quot;TextAppearance.Material3.TitleMedium&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/text_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Badge Styles --&gt;&#10;    &lt;style name=&quot;Widget.PaxelAR.Badge.Success&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@drawable/bg_badge_success&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingTop&quot;&gt;6dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingBottom&quot;&gt;6dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.PaxelAR.Badge.Error&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@drawable/bg_badge_fail&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingTop&quot;&gt;6dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingBottom&quot;&gt;6dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Spacing Styles --&gt;&#10;    &lt;style name=&quot;Widget.PaxelAR.Spacing.Small&quot;&gt;&#10;        &lt;item name=&quot;android:layout_margin&quot;&gt;8dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:padding&quot;&gt;8dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.PaxelAR.Spacing.Medium&quot;&gt;&#10;        &lt;item name=&quot;android:layout_margin&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:padding&quot;&gt;16dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.PaxelAR.Spacing.Large&quot;&gt;&#10;        &lt;item name=&quot;android:layout_margin&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:padding&quot;&gt;24dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &#10;    &lt;!-- Button Styles - Using direct Material Components parents --&gt;&#10;    &lt;style name=&quot;Widget.PaxelAR.Button&quot; parent=&quot;Widget.MaterialComponents.Button&quot;&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;56dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingTop&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingBottom&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;cornerRadius&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;backgroundTint&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;        &lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.PaxelAR.Button.Outlined&quot; parent=&quot;Widget.MaterialComponents.Button.OutlinedButton&quot;&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;56dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingTop&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingBottom&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;cornerRadius&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;strokeColor&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;        &lt;item name=&quot;strokeWidth&quot;&gt;2dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;        &lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.PaxelAR.Button.Text&quot; parent=&quot;Widget.MaterialComponents.Button.TextButton&quot;&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;48dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;cornerRadius&quot;&gt;8dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Card Styles --&gt;&#10;    &lt;style name=&quot;Widget.PaxelAR.CardView&quot; parent=&quot;Widget.MaterialComponents.CardView&quot;&gt;&#10;        &lt;item name=&quot;cardCornerRadius&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;cardElevation&quot;&gt;4dp&lt;/item&gt;&#10;        &lt;item name=&quot;cardBackgroundColor&quot;&gt;@color/surface_primary&lt;/item&gt;&#10;        &lt;item name=&quot;contentPadding&quot;&gt;20dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Toolbar Styles --&gt;&#10;    &lt;style name=&quot;Widget.PaxelAR.Toolbar&quot; parent=&quot;Widget.MaterialComponents.Toolbar&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;        &lt;item name=&quot;titleTextColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;subtitleTextColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:theme&quot;&gt;@style/ThemeOverlay.MaterialComponents.Dark&lt;/item&gt;&#10;        &lt;item name=&quot;popupTheme&quot;&gt;@style/ThemeOverlay.MaterialComponents.Light&lt;/item&gt;&#10;        &lt;item name=&quot;android:elevation&quot;&gt;4dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Typography Styles --&gt;&#10;    &lt;style name=&quot;TextAppearance.PaxelAR.Title&quot; parent=&quot;TextAppearance.MaterialComponents.Headline6&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;22sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/text_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;        &lt;item name=&quot;android:lineSpacingExtra&quot;&gt;4dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TextAppearance.PaxelAR.Subtitle&quot; parent=&quot;TextAppearance.MaterialComponents.Headline6&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;18sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/paxel_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TextAppearance.PaxelAR.Caption&quot; parent=&quot;TextAppearance.MaterialComponents.Caption&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;12sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/text_tertiary&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TextAppearance.PaxelAR.Label&quot; parent=&quot;TextAppearance.MaterialComponents.Body2&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/text_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TextAppearance.PaxelAR.Value&quot; parent=&quot;TextAppearance.MaterialComponents.Subtitle1&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/text_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TextAppearance.PaxelAR.Button&quot; parent=&quot;TextAppearance.MaterialComponents.Button&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;&#10;        &lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>